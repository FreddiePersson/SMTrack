%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                 %
% SMT - Single Molecule Tracking                  %
% ==================================              %
%                                                 %
%    Copyright (C) 2011 Fredrik Persson           %
%    Email: freddie.persson@gmail.com             %
%                                                 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%    This file is part of SMT - Single Molecule Tracking.
%
%     SMT is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
%
%     SMT is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details.
%
%     You should have received a copy of the GNU General Public License
%     along with SMT.  If not, see <http://www.gnu.org/licenses/>.


%%%%%%%%%%%%%%%%%%
% Main functions %
% ============== %
%%%%%%%%%%%%%%%%%%


function varargout = AnalyzeMolecules(varargin)

% Create main figure
hFig = figure(...
    'Units','pixels',...
    'Tag','hANA',...
    'MenuBar','none',...
    'Toolbar','none',...
    'NumberTitle','off',...
    'Visible','off',...
    'Position',[0 0 1 1],...
    'Resize','off',...
    'Colormap',hot);

%Font name & size
font = varargin{1};
fontsize = varargin{2};

%Draw all the panes etc
drawContent(hFig, font, fontsize);

% Load Data to GUI
LoadNewData;

% Set window visible
% 	movegui(hFig,'north');
set(hFig,'Visible','on');

end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Draw GUI content functions %
% ========================== %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


function drawContent(hObject,varargin)

% Delete previous content
delete(get(hObject,'Children'));

% Set name of window
set(hObject,'Name','SMT_Analyze - Analyze Results');


% Dimensions
panelWidth = 450;
frameHeight = 450;

delim = 10;

buttonRowHeight = 30;

trackHeight = frameHeight/2;

totHeight = buttonRowHeight + delim + frameHeight/2 + delim + frameHeight + 1*delim;

totWidth = 2*delim + panelWidth + 2*delim + panelWidth + 2*delim;


yInfo = totHeight - (delim + 1.5*frameHeight);
yLoc = yInfo + (frameHeight/2);

x1 = 2*delim;
x2 = x1 + panelWidth + 2*delim;

set(hObject,'Position',[0 0 totWidth totHeight]);

%System font
font = varargin{1};
fontsize = varargin{2};

% Button Row Panel
hButtonPanel = uibuttongroup(...
    'Parent',hObject,...
    'Tag','ANALYZE_panel_buttonRow',...
    'Units','pixels',...
    'BackgroundColor',get(hObject,'Color'),...
    'visible','on',...
    'BorderType','none',...
    'Position',[0 0 totWidth buttonRowHeight]);
uiButtonRowPanel(hButtonPanel, 0, fontsize, font);

% Info Panel
hDataInfoPanel = uibuttongroup(...
    'Parent',hObject,...
    'Tag','ANALYZE_panel_dataInfo',...
    'Title','Data Info',...
    'FontName', font ,...
    'FontSize',10,...
    'Units','pixels',...
    'BackgroundColor',get(hObject,'Color'),...
    'Position',[x1 yInfo panelWidth frameHeight*1.5]);
uiDataInfoPanel(hDataInfoPanel, 0, fontsize, font);

% Localization Panel
hLocPanel = uibuttongroup(...
    'Parent',hObject,...
    'Tag','ANALYZE_panel_Loc',...
    'Title','Localization Analysis',...
    'FontName', font ,...
    'FontSize',10,...
    'Units','pixels',...
    'BackgroundColor',get(hObject,'Color'),...
    'Position',[x2 yLoc panelWidth frameHeight]);
uiLocalizationPanel(hLocPanel, 0, fontsize, font);

% Tracking Panel
hTrackingPanel = uibuttongroup(...
    'Parent',hObject,...
    'Tag','ANALYZE_panel_tracking',...
    'Title','Tracking Analysis',...
    'FontName', font ,...
    'FontSize',10,...
    'Units','pixels',...
    'BackgroundColor',get(hObject,'Color'),...
    'Position',[x2 yLoc-(trackHeight) panelWidth trackHeight-delim]);
uiTrackingPanel(hTrackingPanel, 0, fontsize, font);

% Credit text
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'Units','pixels',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'FontSize',40,...
    'HorizontalAlignment','left',...
    'String','User: Puff mcElf',...
    'FontName', 'Brush Script MT' ,...
    'ForegroundColor', [0.75 0.75 0.75],...
    'HorizontalAlignment', 'center',...
    'Position',[x1+500 yInfo+20 panelWidth-40 trackHeight/4]);

end




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Panel construction functions %
% ============================ %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


function uiButtonRowPanel(hObject,~,varargin)

% Dimensions
pos = get(hObject,'Position');

w = pos(3);
% h = pos(4);

bw = 90; bh = 25;

% Close button
uicontrol(...
    'Parent',hObject,...
    'Units','pixels',...
    'Style','pushbutton',...
    'String','Close',...
    'FontName', varargin{end} ,...
    'FontSize',varargin{end-1},...
    'Position',[w-(bw+20) 10 bw bh],...
    'Callback',{@CloseButton});

% Load data
uicontrol(...
    'Parent',hObject,...
    'Units','pixels',...
    'Style','pushbutton',...
    'TooltipString','Load new file.',...
    'String','Load new data',...
    'FontName', varargin{end} ,...
    'FontSize',varargin{end-1},...
    'Position',[w-(3*bw+20) 10 2*bw bh],...
    'Callback',{@LoadButton});


	% About button
	uicontrol(...
		'Parent',hObject,...
		'Units','pixels',...
		'Style','pushbutton',...
		'TooltipString','Brings up an About box.',...
		'String','About',...
		'Position',[w-(5*bw+20) 10 bw bh],...
		'Callback',{@aboutButton});


% Save a .mat file.
uicontrol(...
    'Parent',hObject,...
    'Units','pixels',...
    'Style','pushbutton',...
    'TooltipString','Saves a .mat file.',...
    'String','Save .mat',...
    'FontName', varargin{end} ,...
    'FontSize',varargin{end-1},...
    'Position',[20 10 2*bw bh],...
    'Enable', 'off',...
    'Callback',{@SaveMatButton});

end

function uiDataInfoPanel(hObject,~,varargin)

% Dimensions
pos = get(hObject,'Position');

w = pos(3);
h = pos(4);

lw = 120; lh = 25;

tw = round(w/2) - (10 + lw + 5 + 5);
calw = 30;
calw2 = 50;

x1 = 10;
x2 = x1 + lw + 5;
x3 = round(w/2)+5;
x4 = x3 + lw + 5;

y1 = h - (20 + lh);
y2 = y1 - (lh);
y3 = y2 - (lh + 30);
y4 = y3 - lh;
y5 = y4 - lh;
y6 = y5 - lh;
y7 = y6 - lh;
y8 = y7 - lh;
y9 = y8 - lh;
y10 = y9 - lh;
y11 = y10 - lh;
y12 = y11 - lh;
y13 = y12 - lh;
y14 = y13 - lh;
y15 = y14 - lh;
y16 = y15 - lh;
y17 = y16 - lh;
y18 = y17 - lh;
y19 = y18 - lh;
y20 = y19 - lh;
y21 = y20 - lh;
y22 = y21 - lh;
% y23 = y22 - lh;


% Set variables
filename = '-';
pathname = '-';

% LABEL - Filename
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'Units','pixels',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Filename:',...
    'FontName', varargin{end} ,...
    'Position',[x1 y1 lw lh]);
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'Units','pixels',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String',filename,...
    'FontName', varargin{end} ,...
    'Position',[x2 y1-10 w-(x2+10) lh+10],...
    'Tag','ANALYZE_label_filename');

% LABEL - Pathname
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'Units','pixels',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Pathname:',...
    'FontName', varargin{end} ,...
    'Position',[x1 y2 lw lh]);
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'Units','pixels',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String',pathname,...
    'FontName', varargin{end} ,...
    'Position',[x2 y2-lh w-(x2+10) lh*2],...
    'Tag','ANALYZE_label_pathname');


% Parameters from the DETECT interface

% LABEL - Gauss filter param
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'Units','pixels',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Gauss:',...
    'FontName', varargin{end} ,...
    'Position',[x1 y3 lw lh]);
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'Units','pixels',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String',sprintf('%g', 666),...
    'FontName', varargin{end} ,...
    'Position',[x2 y3 tw lh],...
    'Tag','ANALYZE_label_gaussian');

% LABEL - MexiHat filter param
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'Units','pixels',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','MexiHat:',...
    'FontName', varargin{end} ,...
    'Position',[x1 y4 lw lh]);
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'Units','pixels',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String',sprintf('%g', 666),...
    'FontName', varargin{end} ,...
    'Position',[x2 y4 tw lh],...
    'Tag','ANALYZE_label_mexiHat');


% LABEL - relative intensity threshold param
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'Units','pixels',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Rel. intens. thresh.:',...
    'FontName', varargin{end} ,...
    'Position',[x1 y5 lw lh]);
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'Units','pixels',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','666',...
    'FontName', varargin{end} ,...
    'Position',[x2 y5 tw lh],...
    'Tag','ANALYZE_label_relIntTh');


% LABEL - intensity threshold param
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'Units','pixels',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Intens. thresh.:',...
    'FontName', varargin{end} ,...
    'Position',[x1 y6 lw lh]);
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'Units','pixels',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','666',...
    'FontName', varargin{end} ,...
    'Position',[x2 y6 tw lh],...
    'Tag','ANALYZE_label_intTh');


% LABEL - global scaling param
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'Units','pixels',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Global scale:',...
    'FontName', varargin{end} ,...
    'Position',[x1 y7 lw lh]);
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'Units','pixels',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String',sprintf('%g', 666),...
    'FontName', varargin{end} ,...
    'Position',[x2 y7 tw lh],...
    'Tag','ANALYZE_label_globalScale');



% Localize global parameters

% Pixelsize
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Scale [nm / Pixel]:',...
    'FontName', varargin{end} ,...
    'Position',[x3 y3 lw lh]);
uicontrol(...	% Value text
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_scale_1',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','How many nm each pixel is. Should be measured but is approx. Physical pixelsize/Magnification.',...
    'String','1',...
    'FontName', varargin{end} ,...
    'Callback',{},...
    'Position',[x4 y3 tw lh]);

% Fitting Window
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Fitting Window [Pixels]:',...
    'FontName', varargin{end} ,...
    'Position',[x3 y4 lw lh]);
uicontrol(...	% Value text 
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_fitWindow_1',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Window around the coarsly detected peak that will be used to fit it to our model PSF.',...
    'String','0',...
    'FontName', varargin{end} ,...
    'Callback',{},...
    'Position',[x4 y4 tw lh]);

% Limit on xy fitting error
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Max approved std uncert of xy fit [nm]:',...
    'FontName', varargin{end} ,...
    'Position',[x3 y5 lw lh]);
uicontrol(...	% Value text 
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_fitError_1',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Maximum standard error from nlparci (has to be modified to give it out) from the cov matrix.',...
    'String','0',...
    'FontName', varargin{end} ,...
    'Callback',{},...
    'Position',[x4 y5 tw lh]);



% Parameters stating whether data has been altered

% Cropped
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Data cropped:',...
    'FontName', varargin{end} ,...
    'Position',[x3 y9 lw lh]);
uicontrol(...	% Value text
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_cropped_0',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'FontWeight', 'bold',...
    'TooltipString','If any data points have been removed.',...
    'String','No',...
    'FontName', varargin{end} ,...
    'Position',[x4 y9 tw lh],...
    'Visible', 'on');



% Aligned
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Aligned:',...
    'FontName', varargin{end} ,...
    'Position',[x3 y10 lw lh]);
uicontrol(...	% Value text
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_aligned_0',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'FontWeight', 'bold',...
    'TooltipString','If the data points have been aligned to the x-axis.',...
    'String','No',...
    'FontName', varargin{end} ,...
    'Position',[x4 y10 tw lh],...
    'Visible', 'on');


% Drift corrected
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Drift corrected: ',...
    'FontName', varargin{end} ,...
    'Position',[x3 y11 lw lh]);
uicontrol(...	% Value edit box
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_corrected_0',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'FontWeight', 'bold',...
    'TooltipString','If the data points have been corrected for drift.',...
    'String','No',...
    'FontName', varargin{end} ,...
    'Callback',{},...
    'Position',[x4 y11 tw lh],...
    'Visible', 'on');




% Photons stat parameters

% EMCCD Baseline
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','EMCCD Baseline:',...
    'FontName', varargin{end} ,...
    'Position',[x1 y9 lw lh]);
uicontrol(...	% Value text
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_baseline_1',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','The system baseline for the camera (set by baseline clamp if used).',...
    'String','0',...
    'FontName', varargin{end} ,...
    'Position',[x2 y9 tw lh],...
    'Visible', 'on');



% EMCCD Multiplication factor
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Gain [ADU/e-]:',...
    'FontName', varargin{end} ,...
    'Position',[x1 y10 lw lh]);
uicontrol(...	% Value text
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_gain_1',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','The total system gain for the camera+readout (14 for max, 1000, EM-gain and no pregain).',...
    'String','1',...
    'FontName', varargin{end} ,...
    'Position',[x2 y10 tw lh],...
    'Visible', 'on');


% Minimum number of photons per dot to accept it
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Photon  threshold: ',...
    'FontName', varargin{end} ,...
    'Position',[x1 y11 lw lh]);
uicontrol(...	% Value edit box
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_minPhoton_1',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Minimum amount of photons within a fitted signal to be used. The amount is counted by integrating the fitted 2D gaussian.',...
    'String','0',...
    'FontName', varargin{end} ,...
    'Callback',{},...
    'Position',[x2 y11 tw lh],...
    'Visible', 'on');



% 3D parameters

% Limits
% Max Min labels
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','center',...
    'String','Min:',...
    'FontName', varargin{end},...
    'Position',[x2 y13 tw lh]);
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','center',...
    'String','Max:',...
    'FontName', varargin{end},...
    'Position',[x3 y13 tw lh]);


%Limits on Fitting PSF Width/Height
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','PSF Height/Width [nm]:',...
    'FontName', varargin{end} ,...
    'Position',[x1 y14 lw lh]);
uicontrol(...	% Value edit box
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_3DpsfSize_1',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Min width of the fitted PSF.',...
    'String','0',...
    'FontName', varargin{end} ,...
    'Callback',{},...
    'Position',[x2 y14 tw lh],...
    'Visible', 'on');
uicontrol(...	% Value edit box
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_3DpsfSize_2',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Max width of the fitted PSF.',...
    'String','0',...
    'FontName', varargin{end} ,...
    'Callback',{},...
    'Position',[x3 y14 tw lh],...
    'Visible', 'on');



%Limits on z-range for the astigmatism
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Z limits [nm]:',...
    'FontName', varargin{end} ,...
    'Position',[x1 y15 lw lh]);
uicontrol(...	% Value edit box
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_3DzRange_1',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Min z-value.',...
    'String','0',...
    'FontName', varargin{end} ,...
    'Callback',{},...
    'Position',[x2 y15 tw lh],...
    'Visible', 'on');
uicontrol(...	% Value edit box
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_3DzRange_2',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Max z-value.',...
    'String','0',...
    'FontName', varargin{end} ,...
    'Callback',{},...
    'Position',[x3 y15 tw lh],...
    'Visible', 'on');

%Limits on closeness to 3D calibration curves
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','"Distance" to cal. curves:',...
    'FontName', varargin{end} ,...
    'Position',[x1 y16 lw lh]);
uicontrol(...	% Value edit box
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_3DD_1',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Distance to calibration curves according to Huang et al. Science 8 February 2008: Vol. 319 no. 5864 pp. 810-813.',...
    'String','0',...
    'FontName', varargin{end} ,...
    'Callback',{},...
    'Position',[x3 y16 tw lh],...
    'Visible', 'on');


% Calibration curve title
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','3D Calibration curves:',...
    'FontName', varargin{end} ,...
    'Position',[x1 y18 2*tw lh]);

%Calibration files pathname
uicontrol(...	% Value text box
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_cal3DPath_0',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'TooltipString','Think about it!',...
    'String','.',...
    'FontName', varargin{end} ,...
    'Position',[x1 y19+10 5*tw lh],...
    'Visible', 'on');

% Calibration curve for width
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','X = ',...
    'FontName', varargin{end} ,...
    'Position',[x1 y20 calw lh]);
uicontrol(...	% Value text box
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_3DcalX_1',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Think about it!',...
    'String','0',...
    'FontName', varargin{end} ,...
    'Position',[x1+1*calw y20 calw2 lh],...
    'Visible', 'on');
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String',' z^3 + ',...
    'FontName', varargin{end} ,...
    'Position',[x1+(1*calw+1*calw2) y20 calw lh]);
uicontrol(...	% Value text box
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_3DcalX_2',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Think about it!',...
    'String','0',...
    'FontName', varargin{end} ,...
    'Position',[x1+(2*calw+1*calw2) y20 calw2 lh],...
    'Visible', 'on');
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String',' z^2 + ',...
    'FontName', varargin{end} ,...
    'Position',[x1+(2*calw+2*calw2) y20 calw lh]);
uicontrol(...	% Value text box
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_3DcalX_3',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Think about it!',...
    'String','0',...
    'FontName', varargin{end} ,...
    'Position',[x1+(3*calw+2*calw2) y20 calw2 lh],...
    'Visible', 'on');
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String',' z + ',...
    'FontName', varargin{end} ,...
    'Position',[x1+(3*calw+3*calw2) y20 calw lh]);
uicontrol(...	% Value text box
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_3DcalX_4',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Think about it!',...
    'String','0',...
    'FontName', varargin{end} ,...
    'Position',[x1+(4*calw+3*calw2) y20 calw2 lh],...
    'Visible', 'on');


% Calibration curve for height
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Y = ',...
    'FontName', varargin{end} ,...
    'Position',[x1 y22 calw lh]);
uicontrol(...	% Value text box
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_3DcalY_1',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Think about it!',...
    'String','0',...
    'FontName', varargin{end} ,...
    'Position',[x1+1*calw y22 calw2 lh],...
    'Visible', 'on');
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String',' z^3 + ',...
    'FontName', varargin{end} ,...
    'Position',[x1+(1*calw+1*calw2) y22 calw lh]);
uicontrol(...	% Value text box
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_3DcalY_2',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Think about it!',...
    'String','0',...
    'FontName', varargin{end} ,...
    'Position',[x1+(2*calw+1*calw2) y22 calw2 lh],...
    'Visible', 'on');
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String',' z^2 + ',...
    'FontName', varargin{end} ,...
    'Position',[x1+(2*calw+2*calw2) y22 calw lh]);
uicontrol(...	% Value text box
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_3DcalY_3',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Think about it!',...
    'String','0',...
    'FontName', varargin{end} ,...
    'Position',[x1+(3*calw+2*calw2) y22 calw2 lh],...
    'Visible', 'on');
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String',' z + ',...
    'FontName', varargin{end} ,...
    'Position',[x1+(3*calw+3*calw2) y22 calw lh]);
uicontrol(...	% Value text box
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_label_3DcalY_4',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Think about it!',...
    'String','0',...
    'FontName', varargin{end} ,...
    'Position',[x1+(4*calw+3*calw2) y22 calw2 lh],...
    'Visible', 'on');

% Plot calibration curve button
% Track Button
uicontrol(...
    'Parent',hObject,...
    'Units','pixels',...
    'Style','pushbutton',...
    'String','Plot',...
    'FontName', varargin{end} ,...
    'FontSize',varargin{end-1},...
    'Position',[x4 y21 lw/2 lh],...
    'Callback',{@plot3DCal},...
    'Tag','ANALYZE_label_plot3DCal_0',...
    'Enable','on');


end

function uiLocalizationPanel(hObject,~,varargin)

% Dimensions
pos = get(hObject,'Position');

% Global positions
% w = pos(3);	
h = pos(4);

% Label height/width
lw = 120; lh = 23;

% Edit box height/width
ew = 50;


% Start positions
x1 = 10;
x2 = x1 + lw;
x3 = x2 + 1.5*ew;
x4 = x3 + lw;
% x5 = x4 + ew;

y1 = h - (20 + lh);
y2 = y1 - (lh + 5);
y3 = y2 - (lh + 5);
y4 = y3 - (lh + 5);
y5 = y4 - (lh + 5);
y6 = y5 - (lh + 5);
y7 = y6 - (lh + 5);
y8 = y7 - (lh + 5);
y9 = y8 - (lh + 5);
y10 = y9 - (lh + 5);
y11 = y10 - (lh + 5);
y12 = y11 - (lh + 5);
y13 = y12 - (lh + 5);
y14 = y13 - (lh + 5);
y15 = y14 - (lh + 5);
% y16 = y15 - (lh + 5);
% y17 = y16 - (lh + 5);




% 2D Display Button
uicontrol(...
    'Parent',hObject,...
    'Units','pixels',...
    'Style','pushbutton',...
    'String','Display 2D',...
    'FontName', varargin{end} ,...
    'FontSize',varargin{end-1},...
    'Position',[x1 y1 lw lh],...
    'Callback',{@display2DButton},...
    'Tag','ANALYZE_Locset_display2D_0',...
    'Enable','on');


% Overlay
uicontrol(...	% Checkbox
    'Parent',hObject,...
    'Style','checkbox',...
    'Units','pixels',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'FontSize',varargin{end-1},...
    'TooltipString','Choose if you want to overlay the results on an image.',...
    'String','Overlay',...
    'FontName', varargin{end} ,...
    'Position',[x2 y1 lw lh],...
    'Callback',{},...
    'Tag','ANALYZE_Locset_display2D_1',...
    'Value', 0,...
    'Enable','on');


% 3D Display Button
uicontrol(...
    'Parent',hObject,...
    'Units','pixels',...
    'Style','pushbutton',...
    'String','Display 3D',...
    'FontName', varargin{end} ,...
    'FontSize',varargin{end-1},...
    'Position',[x1 y2 lw lh],...
    'Callback',{@display3DButton},...
    'Tag','ANALYZE_Locset_display3D_0',...
    'Enable','on');
uicontrol(...	% Checkbox
    'Parent',hObject,...
    'Style','checkbox',...
    'Units','pixels',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'FontSize',varargin{end-1},...
    'TooltipString','Choose if you want to align the data to the plot axis.',...
    'String','Display aligned',...
    'FontName', varargin{end} ,...
    'Position',[x2 y2 lw lh],...
    'Callback',{},...
    'Tag','ANALYZE_Locset_align_1',...
    'Value', 0,...
    'Enable','off');

% Align Button
uicontrol(...
    'Parent',hObject,...
    'Units','pixels',...
    'Style','pushbutton',...
    'String','Align with X-axis',...
    'FontName', varargin{end} ,...
    'FontSize',varargin{end-1},...
    'Position',[x1 y3 lw lh],...
    'Callback',{@alignButton},...
    'Tag','ANALYZE_Locset_align_0',...
    'Enable','on');


% Correct Drift Button
uicontrol(...
    'Parent',hObject,...
    'Units','pixels',...
    'Style','pushbutton',...
    'String','Corr XY-drift',...
    'FontName', varargin{end} ,...
    'FontSize',varargin{end-1},...
    'Position',[x1 y5 lw lh],...
    'Callback',{@correctDriftButton},...
    'Tag','ANALYZE_Locset_corrDrift_0',...
    'Enable','off');
uicontrol(...	% Value edit box
    'Parent',hObject,...
    'Style','edit',...
    'Tag','ANALYZE_Locset_corrDrift_1',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','The number of points to use to determine the center in every step.',...
    'String','200',...
    'FontName', varargin{end} ,...
    'Callback',{},...
    'Position',[x2 y5 ew lh],...
    'Visible', 'on');
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_Locset_corrDrift_2',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','points',...
    'FontName', varargin{end} ,...
    'Position',[x2+ew+5 y5-4 ew lh]);


% STORM Plot Button
uicontrol(...
    'Parent',hObject,...
    'Units','pixels',...
    'Style','pushbutton',...
    'String','STORM IT',...
    'FontName', varargin{end} ,...
    'FontSize',varargin{end-1},...
    'Position',[x1 y7 lw lh],...
    'Callback',{@PALMPlotButton},...
    'Tag','ANALYZE_Locset_PALMPlot_0',...
    'Enable','on');
uicontrol(...	% Value edit box
    'Parent',hObject,...
    'Style','edit',...
    'Tag','ANALYZE_Locset_PALMPlot_1',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Set the resolution in nm.',...
    'String','2',...
    'FontName', varargin{end} ,...
    'Callback',{},...
    'Position',[x2 y7 ew lh],...
    'Visible', 'on');
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_Locset_PALMPlot_2',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','nm',...
    'FontName', varargin{end} ,...
    'Position',[x2+ew+5 y7-4 ew lh]);

% Limit on xy fitting error
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Max std uncert of xy fit [nm]:',...
    'FontName', varargin{end} ,...
    'Position',[x1 y15 lw+20 lh]);
uicontrol(...	% Value edit box
    'Parent',hObject,...
    'Style','edit',...
    'Tag','ANALYZE_Locset_fitError_1',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Maximum standard error from nlparci_FP (has to be modified to give it out) from the cov matrix.',...
    'String','50',...
    'FontName', varargin{end} ,...
    'Callback',{@LimitXYRes},...
    'Position',[x2+10 y15+4 ew lh]);


% Revert Button
uicontrol(...
    'Parent',hObject,...
    'Units','pixels',...
    'Style','pushbutton',...
    'String','Revert',...
    'FontName', varargin{end} ,...
    'FontSize',varargin{end-1},...
    'Position',[x4 y1 lw lh],...
    'Callback',{@revertButton},...
    'Tag','ANALYZE_Locset_revert_0',...
    'Enable','on');

% Send to main workspace button
uicontrol(...
    'Parent',hObject,...
    'Units','pixels',...
    'Style','pushbutton',...
    'String','Send to workspace',...
    'FontName', varargin{end} ,...
    'FontSize',varargin{end-1},...
    'Position',[x4 y6 lw lh],...
    'Callback',{@sendToWSButton},...
    'Tag','ANALYZE_Locset_sendToWS_0',...
    'Enable','on');
uicontrol(...	% Value edit box
    'Parent',hObject,...
    'Style','edit',...
    'Tag','ANALYZE_Locset_sendToWS_1',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Variable name to obtain in the main workspace.',...
    'String','Pos1_1',...
    'FontName', varargin{end} ,...
    'Callback',{},...
    'Position',[x4 y5 lw lh],...
    'Visible', 'on');

end

function uiTrackingPanel(hObject,~,varargin)

% Dimensions
pos = get(hObject,'Position');

% Global positions
% w = pos(3);	
h = pos(4);

% Label height/width
lw = 120; lh = 23;

% Edit box height/width
ew = 50;


% Start positions
x1 = 10;
x2 = x1 + lw/2;
x3 = x2 + lw/2;
x4 = x3 + lw/2;
x5 = x4 + lw/2;
x6 = x5 + lw/2;
x7 = x6 + lw/2;

y1 = h - (20 + lh);
y2 = y1 - (lh - 2);
y3 = y2 - (lh - 2);
y4 = y3 - (lh - 2);
% y5 = y4 - (lh - 2);
% y6 = y5 - (lh - 2);
% y7 = y6 - (lh - 2);


% Max movement
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Max. dist. [nm]:',...
    'FontName', varargin{end} ,...
    'Position',[x1 y1 lw lh]);
uicontrol(...	% Value edit box
    'Parent',hObject,...
    'Style','edit',...
    'Tag','ANALYZE_Trackset_maxDist_1',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Maximum distance a molecule is allowed to move between frames to still be in the same trajectory.',...
    'String','400',...
    'FontName', varargin{end} ,...
    'Callback',{},...
    'Position',[x2+20 y1+4 ew lh]);

% Min # points in trajectory
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Min. # points:',...
    'FontName', varargin{end} ,...
    'Position',[x3+20 y1 lw lh]);
uicontrol(...	% Value edit box
    'Parent',hObject,...
    'Style','edit',...
    'Tag','ANALYZE_Trackset_minPoints_1',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Minimum number of points in a trajectory to accept it as a trajectory.',...
    'String','3',...
    'FontName', varargin{end} ,...
    'Callback',{},...
    'Position',[x4+35 y1+4 ew lh]);


% Timestep
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Timestep [ms]:',...
    'FontName', varargin{end} ,...
    'Position',[x6+5 y2-10 lw lh]);
uicontrol(...	% Value edit box
    'Parent',hObject,...
    'Style','edit',...
    'Tag','ANALYZE_Trackset_timeStep_1',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Time between 2 consecutive frames.',...
    'String','5',...
    'FontName', varargin{end} ,...
    'Callback',{},...
    'Position',[x7+20 y2-6 ew lh]);


% Show trajectory length histogram
uicontrol(...	% Checkbox
    'Parent',hObject,...
    'Style','checkbox',...
    'Units','pixels',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'FontSize',varargin{end-1},...
    'TooltipString','Choose if a histogram with trajectory length should be shown.',...
    'String','Traj. hist.',...
    'FontName', varargin{end} ,...
    'Position',[x1 y2 lw lh],...
    'Callback',{},...
    'Tag','ANALYZE_Trackset_trajHist_0',...
    'Value', 0,...
    'Enable','on');


% Show MSD plot
uicontrol(...	% Checkbox
    'Parent',hObject,...
    'Style','checkbox',...
    'Units','pixels',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'FontSize',varargin{end-1},...
    'TooltipString','Choose if MSD plot should be displayed.',...
    'String','MSD plot',...
    'FontName', varargin{end} ,...
    'Position',[x1 y3 lw lh],...
    'Callback',{},...
    'Tag','ANALYZE_Trackset_MSD_0',...
    'Value', 0,...
    'Enable','on');


% Show CDF plot
uicontrol(...	% Checkbox
    'Parent',hObject,...
    'Style','checkbox',...
    'Units','pixels',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'FontSize',varargin{end-1},...
    'TooltipString','Choose if CDF plot should be displayed.',...
    'String','CDF plot [steps]:',...
    'FontName', varargin{end} ,...
    'Position',[x1 y4 lw lh],...
    'Callback',{},...
    'Tag','ANALYZE_Trackset_CDF_0',...
    'Value', 0,...
    'Enable','on');
uicontrol(...	% Value edit box
    'Parent',hObject,...
    'Style','edit',...
    'Tag','ANALYZE_Trackset_CDF_1',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Min. number of steps to use as a unit for the CDF.',...
    'String','1',...
    'FontName', varargin{end} ,...
    'Callback',{},...
    'Position',[x2+45 y4 ew/2 lh]);
uicontrol(...	% label
    'Parent',hObject,...
    'Style','text',...
    'Tag','ANALYZE_Trackset_CDF_2',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','center',...
    'String','to',...
    'FontName', varargin{end} ,...
    'Callback',{},...
    'Position',[x3+10 y4-4 10 lh]);
uicontrol(...	% Value edit box
    'Parent',hObject,...
    'Style','edit',...
    'Tag','ANALYZE_Trackset_CDF_2',...
    'BackgroundColor',get(findobj('Tag','hSMT'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Max number of steps to use as a unit for the CDF.',...
    'String','1',...
    'FontName', varargin{end} ,...
    'Callback',{},...
    'Position',[x3+25 y4 ew/2 lh]);


% Track Button
uicontrol(...
    'Parent',hObject,...
    'Units','pixels',...
    'Style','pushbutton',...
    'String','Track',...
    'FontName', varargin{end} ,...
    'FontSize',varargin{end-1},...
    'Position',[x6 y1 lw lh],...
    'Callback',{@trackButton},...
    'Tag','ANALYZE_Trackset_track_0',...
    'Enable','on');



end





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Button callback functions %
% ========================= %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


function aboutButton(~,~,varargin)
	
    msgbox(sprintf(...
['\nSMTrack, AnalyzeMolecules.m \n\n' 'Copyright (C) 2011 Fredrik Persson \n\n' ...
 'This program comes with ABSOLUTELY NO WARRANTY. \n' ...
 'This is free software, and you are welcome to redistribute it \n' ...
 'under certain conditions. See license.txt for details. \n\n ']));
	
end

function CloseButton(~,varargin)

close(findobj('Tag','hANA'));

end

function LoadButton(~,varargin)

LoadNewData;

end

function SaveMatButton(~,varargin)

% Load data struct
data = guidata(findobj('Tag','hSMT'));
filename = data.ANALYZE.filename;
path = data.ANALYZE.pathname;

% Change to the folder it the file was opened from
oldFolder = cd(path);

% Show save dialogue
[filename, pathname] = uiputfile('*.mat', 'Select .mat file to save', filename);
full_filename = [ pathname, filename ];

% Create outData struct & read in set parameters from GUI
LOCALIZE = struct('scale', get(findobj('Tag', 'ANALYZE_Locset_scale_1'), 'String'),...
    'maxxyUnCert', get(findobj('Tag', 'ANALYZE_Locset_fitError_1'), 'String'),...
    'fitWindowSize', get(findobj('Tag', 'ANALYZE_Locset_fitWindow_1'), 'String'),...
    'use3D', get(findobj('Tag', 'ANALYZE_Locset_3D_0'), 'Value'),...
    'psfLimits', [0, 0],...
    'zLimits', [0, 0],...
    'dist3D', '0',...
    'xCal3D', [0, 0, 0, 0],...
    'yCal3D', [0, 0, 0, 0],...
    'photons', get(findobj('Tag', 'ANALYZE_Locset_photon_0'), 'Value'),...
    'EMCCDBaseline', '0',...
    'EMCCDGain', '0',...
    'photonTh', '0',...
    'gaussian', data.ANALYZE.gaussian,...
    'mexiHat', data.ANALYZE.mexiHat,...
    'relIntTh', data.ANALYZE.relIntTh,...
    'intTh', data.ANALYZE.intTh,...
    'globalScale', data.ANALYZE.globalScale,...
    'rawData', data.ANALYZE.rawData);

% If 3D is activated save the variables
if get(findobj('Tag', 'ANALYZE_Locset_3D_0'), 'Value');
    LOCALIZE.psfLimits = [str2double(get(findobj('Tag', 'ANALYZE_Locset_3DpsfSize_1'), 'String')), str2double(get(findobj('Tag', 'ANALYZE_Locset_3DpsfSize_2'), 'String'))];
    LOCALIZE.zLimits = [str2double(get(findobj('Tag', 'ANALYZE_Locset_3DzRange_1'), 'String')), str2double(get(findobj('Tag', 'ANALYZE_Locset_3DzRange_2'), 'String'))];
    LOCALIZE.dist3D = get(findobj('Tag', 'ANALYZE_Locset_3DD_1'), 'String');
    LOCALIZE.xCal3D = [str2double(get(findobj('Tag', 'ANALYZE_Locset_3DcalX_1'), 'String')),...
        str2double(get(findobj('Tag', 'ANALYZE_Locset_3DcalX_2'), 'String')),...
        str2double(get(findobj('Tag', 'ANALYZE_Locset_3DcalX_3'), 'String')),...
        str2double(get(findobj('Tag', 'ANALYZE_Locset_3DcalX_4'), 'String'))];
    LOCALIZE.yCal3D = [str2double(get(findobj('Tag', 'ANALYZE_Locset_3DcalY_1'), 'String')),...
        str2double(get(findobj('Tag', 'ANALYZE_Locset_3DcalY_2'), 'String')),...
        str2double(get(findobj('Tag', 'ANALYZE_Locset_3DcalY_3'), 'String')),...
        str2double(get(findobj('Tag', 'ANALYZE_Locset_3DcalY_4'), 'String'))];
end

% If photon stats is activated save the variables
if get(findobj('Tag', 'ANALYZE_Locset_photon_0'), 'Value');
    
    LOCALIZE.EMCCDBaseline = get(findobj('Tag', 'ANALYZE_Locset_baseline_1'), 'String');
    LOCALIZE.EMCCDGain = get(findobj('Tag', 'ANALYZE_Locset_gain_1'), 'String');
    LOCALIZE.photonTh = get(findobj('Tag', 'ANALYZE_Locset_minPhoton_1'), 'String');
end


% Save the .mat file
save(full_filename, 'LOCALIZE');

% Change back to the old folder
cd(oldFolder);

end

function plot3DCal(~, varargin)
figure('Name', data.ANALYZE.filename,'NumberTitle','off');
hold on;
x = linspace(str2double(get(findobj('Tag', 'ANALYZE_label_3DzRange_1'), 'String')), str2double(get(findobj('Tag', 'ANALYZE_label_3DzRange_2'), 'String')), 100);

polyxFile = [str2double(get(findobj('Tag', 'ANALYZE_label_3DcalX_1'), 'String')),...
    str2double(get(findobj('Tag', 'ANALYZE_label_3DcalX_2'), 'String')),...
    str2double(get(findobj('Tag', 'ANALYZE_label_3DcalX_3'), 'String')),...
    str2double(get(findobj('Tag', 'ANALYZE_label_3DcalX_4'), 'String'))];

polyyFile = [str2double(get(findobj('Tag', 'ANALYZE_label_3DcalY_1'), 'String')),...
    str2double(get(findobj('Tag', 'ANALYZE_label_3DcalY_2'), 'String')),...
    str2double(get(findobj('Tag', 'ANALYZE_label_3DcalY_3'), 'String')),...
    str2double(get(findobj('Tag', 'ANALYZE_label_3DcalY_4'), 'String'))];

plot(x, polyval(polyxFile, x), '-r');
plot(x, polyval(polyyFile, x), '-b');
legend('Width','Height','Location','SE')
title('3D Calibration curves');
xlabel('Z position [nm]');
ylabel('Width/Height [nm]');

hold off
end

function display2DButton(~,varargin)

% Load data structure
data = guidata(findobj('Tag','hSMT'));

activeInd = data.ANALYZE.activeInd;

xarr = data.ANALYZE.xDataCorr(activeInd);
yarr = data.ANALYZE.yDataCorr(activeInd);
zarr = data.ANALYZE.zDataOrig(activeInd);
xOrig = data.ANALYZE.xDataCorr;
yOrig = data.ANALYZE.yDataCorr;
zOrig = data.ANALYZE.zDataOrig;

% Make sure no negative values
xarr = abs(xarr);
yarr = abs(yarr);

f2D=figure('Name', data.ANALYZE.filename,'NumberTitle','off');

if get(findobj('Tag', 'ANALYZE_Locset_display2D_1'), 'Value');
    
    %Read in a file
    [filename, pathname] = uigetfile('*.tif', 'Select BF image file (TIF)');
    if ( filename == 0 )
        disp('Error! No (or wrong) file selected!')
        return
    end
    frame = double(imread([ pathname, filename ]));
    
    % Display it
    hold on
    imagesc(flipud(frame));
    colormap(gray);
    plot(unscaled(xarr)+1, unscaled(yarr)+1, '+r');
    rotate3d on
    title('Overlayed image.');
    axis([0 size(frame, 2) 0 size(frame, 1)]);
    title('XY Projection');
    hold off
else
    
    
    % Plot the points
    h2D = plot3(xarr, yarr, zarr, '+r');
    view(2);
    rotate3d on
    title('Select points to include and press any key.');
    ans = [];
    pause on;
    pause;
    figure(f2D);
    pause off;
    
    % Take the new variable containing the points and replot
    if ~isempty(ans)
        xarr = ans(:, 1);
        yarr = ans(:, 2);
        zarr = ans(:, 3);
        h2D = plot3(xarr, yarr, zarr, '+r');
        view(2);
        % Reset the active index array to take the chosen indexes
        activeInd = [];
        for ind = 1 : length(xarr)
            
            xInd = find(xOrig == xarr(ind));
            yInd = find(yOrig == yarr(ind));
            zInd = find(zOrig == zarr(ind));
            
            if isequal(xInd, yInd) %&& (~isequal(z, zeros(size(z))) && isequal(xInd, yInd) && isequal(xInd, yInd))
                activeInd = [activeInd, xInd];
            end
            
        end
        activeInd = sort(activeInd);
    end
    
    % Check if data has been cropped
    if isequal(activeInd, [1:length(xOrig)])
        data.ANALYZE.cropped = 'No';
    else
        data.ANALYZE.cropped = 'Yes';
    end
    set(findobj('Tag', 'ANALYZE_label_cropped_0'), 'String', data.ANALYZE.cropped);
    
    % Rotate the data to align along the x-axis
    if get(findobj('Tag', 'ANALYZE_Locset_align_1'), 'Value');
        align(h2D);
    end
    title('XY Projection');
    rotate3d on;
    axis equal;
    
end

data.ANALYZE.activeInd = activeInd;

guidata(findobj('Tag','hSMT'), data);

end

function display3DButton(~,varargin)

% Load data structure
data = guidata(findobj('Tag','hSMT'));

activeInd = data.ANALYZE.activeInd;

xarr = data.ANALYZE.xDataCorr(activeInd);
yarr = data.ANALYZE.yDataCorr(activeInd);
zarr = data.ANALYZE.zDataOrig(activeInd);
xOrig = data.ANALYZE.xDataCorr;
yOrig = data.ANALYZE.yDataCorr;
zOrig = data.ANALYZE.zDataOrig;

% Make sure x and y are positive
xarr = abs(xarr);
yarr = abs(yarr);


% % Remove bad points
% zarr = zarr(xarr > 0);
% xarr = xarr(xarr > 0);
% yarr = yarr(yarr > 0);
% % Rescale arrays
% xarr = xarr - min(min(xarr));
% yarr = yarr - min(min(yarr));

f3D=figure('Name', data.ANALYZE.filename,'NumberTitle','off');
% Plot the points
h3D = plot3(xarr, yarr, zarr, '+r');
rotate3d on
title('Select points to include and press any key.');
ans = [];
pause on;
pause;
figure(f3D)
pause off;

% Take the new variable containing the points and replot
if ~isempty(ans)
    xarr = ans(:, 1);
    yarr = ans(:, 2);
    zarr = ans(:, 3);
    h3D = plot3(xarr, yarr, zarr, '+r');
    % Reset the active index array to take the chosen indexes
    activeInd = [];
    for ind = 1 : length(xarr)
        
        xInd = find(xOrig == xarr(ind));
        yInd = find(yOrig == yarr(ind));
        zInd = find(zOrig == zarr(ind));
        
        if isequal(xInd, yInd) %&& (~isequal(z, zeros(size(z))) && isequal(xInd, yInd) && isequal(xInd, yInd))
            activeInd = [activeInd, xInd];
        end
        
    end
    activeInd = sort(activeInd);
end

% Check if data has been cropped
if isequal(activeInd, [1:length(xOrig)])
    data.ANALYZE.cropped = 'No';
else
    data.ANALYZE.cropped = 'Yes';
end
set(findobj('Tag', 'ANALYZE_label_cropped_0'), 'String', data.ANALYZE.cropped);

% Rotate the data to align along the x-axis
if get(findobj('Tag', 'ANALYZE_Locset_align_1'), 'Value');
    align(h3D);
end
title('XYZ Plot');
rotate3d on;
axis equal;

%Save the index of the points to work with
data.ANALYZE.activeInd = activeInd;

guidata(findobj('Tag','hSMT'), data);

end

function alignButton(~, varargin)

data = guidata(findobj('Tag','hSMT'));
activeInd = data.ANALYZE.activeInd;
xarr = data.ANALYZE.xDataCorr(activeInd);
yarr = data.ANALYZE.yDataCorr(activeInd);

figure('Name', data.ANALYZE.filename,'NumberTitle','off');
h2D = plot(xarr, yarr, '+r');
[xData, yData] = align(h2D);


% Store the aligned coords
data.ANALYZE.xDataCorr(data.ANALYZE.activeInd) = xData;
data.ANALYZE.yDataCorr(data.ANALYZE.activeInd) = yData;

data.ANALYZE.aligned = 'Yes';

guidata(findobj('Tag','hSMT'), data);

set(findobj('Tag', 'ANALYZE_label_aligned_0'), 'String', data.ANALYZE.aligned);

end

function correctDriftButton(~, varargin)
data = guidata(findobj('Tag','hSMT'));

xOrig = data.ANALYZE.xDataCorr;
yOrig = data.ANALYZE.yDataCorr;
zOrig = data.ANALYZE.zDataOrig;
activeInd = data.ANALYZE.activeInd;

x = xOrig(activeInd);
y = yOrig(activeInd);
z = zOrig(activeInd);

numpoints = max(size(x));


meanX = [];
meanY = [];
xCorr = x;
yCorr = y;
stepSize = str2double(get(findobj('Tag', 'ANALYZE_Locset_corrDrift_1'), 'String'));
meanX = [meanX, mean(x(1:stepSize))];
meanY = [meanY, mean(y(1:stepSize))];

for i = (stepSize/2)+1:numpoints-(stepSize/2)
    if stepSize > numpoints
        disp('Not enough points to correct for drift with the current settings.');
        return
    elseif i == numpoints-(stepSize/2)
        meanX = [meanX, mean(x(i-stepSize/2:i+stepSize/2))];
        meanY = [meanY, mean(y(i-stepSize/2:i+stepSize/2))];
        xCorr(i:end) = x(i:end) - (meanX(end)-meanX(1));
        yCorr(i:end) = y(i:end) - (meanY(end)-meanY(1));
        
    else
        meanX = [meanX, mean(x(i-stepSize/2:i+stepSize/2))];
        meanY = [meanY, mean(y(i-stepSize/2:i+stepSize/2))];
        xCorr(i) = x(i) - (meanX(end)-meanX(1));
        yCorr(i) = y(i) - (meanY(end)-meanY(1));
        
    end
end

figure('Name', data.ANALYZE.filename,'NumberTitle','off');
hCorr = plot3(xCorr, yCorr, z, '+b');
rotate3d on;
% Rotate the data to align along the x-axis
if get(findobj('Tag', 'ANALYZE_Locset_align_1'), 'Value');
    align(hCorr);
end
title('XYZ Plot');
rotate3d on;
axis equal;


figure('Name', data.ANALYZE.filename,'NumberTitle','off');
plot(meanX, meanY);


data.ANALYZE.xDataCorr(activeInd) = xCorr;
data.ANALYZE.yDataCorr(activeInd) = yCorr;

% Set variable stating the change
data.ANALYZE.corrected = 'Yes';


guidata(findobj('Tag','hSMT'), data);

% Turn off the option of repeating the correction without reverting
set(findobj('Tag', 'ANALYZE_Locset_corrDrift_0'), 'Enable', 'off');
set(findobj('Tag', 'ANALYZE_Locset_corrDrift_1'), 'Visible', 'off');
set(findobj('Tag', 'ANALYZE_label_corrected_0'), 'String', data.ANALYZE.corrected);

end

function PALMPlotButton(~, varargin)

data = guidata(findobj('Tag','hSMT'));
activeInd = data.ANALYZE.activeInd;
x = data.ANALYZE.xDataCorr(activeInd);
y = data.ANALYZE.yDataCorr(activeInd);
z = data.ANALYZE.zDataOrig(activeInd);
xDev = data.ANALYZE.xDataDevOrig(activeInd);
yDev = data.ANALYZE.yDataDevOrig(activeInd);

% Obtain coord system for entire frame
xC = floor(min(x)-20):4:ceil(max(x)+20);
yC = floor(min(y)-20):4:ceil(max(y)+20);
[xcoord, ycoord] = meshgrid(xC, yC);

xcoordArr = xcoord(:);
ycoordArr = ycoord(:);

% Reconstruct model from fitted parameters
fitFrame = zeros(size(xcoord));
for i = 1:length(x)
    i
    params = [1000/(2*pi*xDev(i)*yDev(i)) 0 x(i) y(i) xDev(i) yDev(i)];
    fitFrame = max(fitFrame, reshape(pointGaussian(params',[xcoordArr, ycoordArr]), size(fitFrame)));
end

figure('Name', data.ANALYZE.filename,'NumberTitle','off');;
PALM = surf(xC,yC,fitFrame, 'EdgeColor','none');
colormap(hot)
view(0,90)
axis equal
axis off



end

function revertButton(~, varargin)
data = guidata(findobj('Tag','hSMT'));

data.ANALYZE.xDataCorr = data.ANALYZE.xDataOrig;
data.ANALYZE.yDataCorr = data.ANALYZE.yDataOrig;
data.ANALYZE.activeInd = [1:length(data.ANALYZE.xDataOrig)];

% Reset the variables stating modifications
data.ANALYZE.cropped = 'No';
data.ANALYZE.aligned = 'No';
data.ANALYZE.corrected = 'No';

guidata(findobj('Tag','hSMT'), data);

% Reactivate the option for driftcorrection
set(findobj('Tag', 'ANALYZE_Locset_corrDrift_0'), 'Enable', 'on');
set(findobj('Tag', 'ANALYZE_Locset_corrDrift_1'), 'Visible', 'on');

% Update GUI text
set(findobj('Tag', 'ANALYZE_label_cropped_0'), 'String', data.ANALYZE.cropped);
set(findobj('Tag', 'ANALYZE_label_aligned_0'), 'String', data.ANALYZE.aligned);
set(findobj('Tag', 'ANALYZE_label_corrected_0'), 'String', data.ANALYZE.corrected);

LimitXYRes;

end

function sendToWSButton(~, varargin)

data = guidata(findobj('Tag','hSMT'));
activeInd = data.ANALYZE.activeInd;
x = data.ANALYZE.xDataCorr(activeInd);
y = data.ANALYZE.yDataCorr(activeInd);
z = data.ANALYZE.zDataOrig(activeInd);
xDev = data.ANALYZE.xDataDevOrig(activeInd);
yDev = data.ANALYZE.yDataDevOrig(activeInd);

WSvar = [x', y', z', xDev', yDev'];

assignin('base', get(findobj('Tag', 'ANALYZE_Locset_sendToWS_1'), 'String'), WSvar);

end

function trackButton(~, varargin)

data = guidata(findobj('Tag','hSMT'));

activeInd = data.ANALYZE.activeInd;
x = data.ANALYZE.xDataCorr(activeInd);
y = data.ANALYZE.yDataCorr(activeInd);
z = data.ANALYZE.zDataOrig(activeInd);
frameNr = data.ANALYZE.frameNumOrig(activeInd);

maxDist = str2double(get(findobj('Tag', 'ANALYZE_Trackset_maxDist_1'), 'String'));

firstTrajFrame = 0;
traj = cell(1, floor((max(frameNr)-min(frameNr))/2));
lastTrajNr = 0;

nextHash = zeros(50,1);

for i = min(frameNr):max(frameNr)
    lastHash = nextHash;
    nextHash = zeros(50,1);
    currInd = find(frameNr == i);
    nextInd = find(frameNr == i+1);
    if ~isempty(currInd) && ~isempty(nextInd)
        if firstTrajFrame == 0
            firstTrajFrame = i;
        end
        currPos = [x(currInd)', y(currInd)'];
        nextPos = [x(nextInd)', y(nextInd)'];
        
        D = pdist2(currPos, nextPos);
        
        for ii = 1:size(currPos, 1)
            singleCurr = D(ii, :);
            match = singleCurr<=maxDist;
           
            % If one point can go to multiple points in the following frame
            if length(find(match)) > 1;
                % Start new trajectories in the next frame for the points
                newInd = find(match);
                
                for iii = 1:length(newInd)
                    lastTrajNr = lastTrajNr+1;
                    nextHash(newInd(iii)) = lastTrajNr;
                end
                
            end
        end
        
        for ii = 1:size(nextPos, 1)
            singleCurr = D(:, ii);
            match = singleCurr<=maxDist;
            
            if ((length(find(match)) > 1) || (isempty(find(match, 1)))) && (nextHash(ii) == 0)
                % Start new trajectories in this frame
                lastTrajNr = lastTrajNr+1;
                nextHash(ii) = lastTrajNr;
                         
            elseif (nextHash(ii) ~= 0);
            % Do nothing =D
                
            else
                % If first frame then add current step
                oldInd = find(match);
                if i == firstTrajFrame
                    lastTrajNr = lastTrajNr+1; % Puts it to 1 since its 0 before
                    lastHash(oldInd) = lastTrajNr;
                end
                
                % Start a new trajectory if appears new
                if lastHash(oldInd) == 0
                    lastTrajNr = lastTrajNr+1;
                    nextHash(ii) = lastTrajNr;
                    
                    traj{nextHash(ii)} = [currPos(oldInd, :), 0, i];
                        
                    traj{nextHash(ii)} = [traj{nextHash(ii)}; nextPos(ii, :), D(oldInd, ii), i+1];                    
                    
                else
                    lastTrajNr;
                    % Add the next step in the trajectory
                    nextHash(ii) = lastHash(oldInd);
                    
                    if isempty(traj{nextHash(ii)})
                        traj{nextHash(ii)} = [currPos(oldInd, :), 0, i];  
                    end
                    
                    traj{nextHash(ii)} = [traj{nextHash(ii)}; nextPos(ii, :), D(oldInd, ii), i+1];
                end
            end
            
        end
        
    end
    
end
finalTraj = {};
lHist = [];

% Remove empty trajectories and plot all of them
figure('Name', data.ANALYZE.filename,'NumberTitle','off');
hold on
color = {'-r' '-b' '-k' '-g' '-m' '-c'};
i = 1;
for ind=1:length(traj)
    tempTraj = traj{ind};
    if ~isempty(tempTraj) && size(tempTraj, 1) >= str2double(get(findobj('Tag', 'ANALYZE_Trackset_minPoints_1'), 'String'))
        finalTraj{end+1} = tempTraj;
        lHist = [lHist, size(tempTraj, 1)];
        plot(tempTraj(:, 1), tempTraj(:, 2), color{i});
        i = i+1;
        if i > 6
            i = 1;
        end
    end
end
title('Trajectories');
xlabel('X [nm]');
ylabel('Y [nm]');
axis equal
hold off

assignin('base', 'finalTraj', finalTraj);

% Plot a histogram of trajectory lengths if desired
if get(findobj('Tag', 'ANALYZE_Trackset_trajHist_0'), 'Value');
    xBin = [1:max(lHist)];
    figure('Name', data.ANALYZE.filename,'NumberTitle','off');
    hist(lHist, xBin);
    title('Histogram over trajectory lengths');
    xlabel('Length [steps]');
    ylabel('Counts');
end

% Make MSD plot(one for all trajectories)
msdCell = cell(3, length(finalTraj));
sqDisplTotCell = cell(3, max(lHist));

% Run through the trajectories
for i = 1:length(finalTraj)
    tempTraj = finalTraj{i};
    
    % Calculate all squared displacements
    for dt = 1:size(tempTraj, 1)
        
        dCoords = tempTraj(1+dt:end,1:2) - tempTraj(1:end-dt,1:2);
        sqDispl = sum(dCoords.^2,2); % dx^2+dy^2
        sqDisplTotCell{1, dt} = [sqDisplTotCell{1, dt}; sqDispl];
  
        
% Checking for an error that lets through steps loonger than the set value...        
% if (dt==1) && (~isempty(find(sqrt(sqDispl) > 400)))
%     i
%     return
% end
        
        
        msd(dt,1) = mean(sqDispl); % average
        msd(dt,2) = std(sqDispl); % std
        msd(dt,3) = length(sqDispl); % n
        
        if isequal(data.ANALYZE.aligned, 'Yes')
            sqDisplX = dCoords(:, 1).^2;
            sqDisplY = dCoords(:, 2).^2;
            sqDisplTotCell{2, dt} = [sqDisplTotCell{2, dt}; sqDisplX];
            sqDisplTotCell{3, dt} = [sqDisplTotCell{3, dt}; sqDisplY];
            
            msdX(dt,1) = mean(sqDisplX); % average
            msdX(dt,2) = std(sqDisplX); % std
            msdX(dt,3) = length(sqDisplX); % n
            msdY(dt,1) = mean(sqDisplY); % average
            msdY(dt,2) = std(sqDisplY); % std
            msdY(dt,3) = length(sqDisplY); % n
        end
        
        
        
%         % For the smallest timesteps save the av jumplength for the first
%         % and second half of the trajectory.
%         if dt == 1
%         
%            displ = sqrt(sqDispl);
%            halfTrajs(i, 1) = mean(displ(1:floor(end/2)));
%            halfTrajs(i, 2) = std(displ(1:floor(end/2)));
%            halfTrajs(i, 3) = mean(displ(floor(end/2)+1:end));
%            halfTrajs(i, 4) = std(displ(floor(end/2)+1:end));
%             
%         end
        
    end
    % Save the individual MSDs in a cell structure
    msdCell{1, i} = msd;
    if isequal(data.ANALYZE.aligned, 'Yes')
        msdCell{2, i} = msdX;
        msdCell{3, i} = msdY;
    end
    
end

% % Plot the half trajectories average steplengths
% figure('Name', data.ANALYZE.filename,'NumberTitle','off');
% diffHalfTrajs = halfTrajs(:, 1)-halfTrajs(:, 3);
% diffHalfTrajs = diffHalfTrajs(find(diffHalfTrajs ~= 0));
% plot(diffHalfTrajs, 'xr');
% % errorbar([mean(halfTrajs(:, 1)) mean(halfTrajs(:, 3))], [std(halfTrajs(:, 1)) std(halfTrajs(:, 3))]./sqrt(length(halfTrajs(:, 1))), 'xr');
% title('Steplength: 1st half - 2nd half');
% xlabel('Trajectory #');
% ylabel('1st half - 2nd half');
% figure;
% hist(diffHalfTrajs, 500);
% title('Steplength: 1st half - 2nd half');
% xlabel('1st half - 2nd half');
% ylabel('Counts');
        

length(finalTraj)

% Make one general MSD list
msdTot = [length(sqDisplTotCell), 3];
if isequal(data.ANALYZE.aligned, 'Yes')
    msdTotX = [length(sqDisplTotCell), 3];
    msdTotY = [length(sqDisplTotCell), 3];
end

for dt = 1:length(sqDisplTotCell)
    msdTot(dt,1) = mean(sqDisplTotCell{1, dt}); % average
    msdTot(dt,2) = std(sqDisplTotCell{1, dt}); % std
    msdTot(dt,3) = length(sqDisplTotCell{1, dt}); % n
    if isequal(data.ANALYZE.aligned, 'Yes')
        msdTotX(dt,1) = mean(sqDisplTotCell{2, dt}); % average
        msdTotX(dt,2) = std(sqDisplTotCell{2, dt}); % std
        msdTotX(dt,3) = length(sqDisplTotCell{2, dt}); % n
        msdTotY(dt,1) = mean(sqDisplTotCell{3, dt}); % average
        msdTotY(dt,2) = std(sqDisplTotCell{3, dt}); % std
        msdTotY(dt,3) = length(sqDisplTotCell{3, dt}); % n
    end
    
end

% Calculate diffusion constant from the 3 first points
diffArr = [msdTot(1:2, 1)']./(1000^2);
xArr = [1, 2];
unitTime = str2double(get(findobj('Tag', 'ANALYZE_Trackset_timeStep_1'), 'String'))/1000; % Time between frames in ms
[p, S] = polyfit(xArr.*unitTime, diffArr, 1);
diffOffset = p(2);
diffCoeff = p(1)/4;

if isequal(data.ANALYZE.aligned, 'Yes')
    diffArr = [msdTotX(1:2, 1)']./(1000^2);
    xArr = [1, 2];
    unitTime = str2double(get(findobj('Tag', 'ANALYZE_Trackset_timeStep_1'), 'String'))/1000; % Time between frames in ms
    [pX, S] = polyfit(xArr.*unitTime, diffArr, 1);
    diffOffsetX = pX(2);
    diffCoeffX = pX(1)/2;
    
    diffArr = [msdTotY(1:2, 1)']./(1000^2);
    xArr = [1, 2];
    unitTime = str2double(get(findobj('Tag', 'ANALYZE_Trackset_timeStep_1'), 'String'))/1000; % Time between frames in ms
    [pY, S] = polyfit(xArr.*unitTime, diffArr, 1);
    diffOffsetY = pY(2);
    diffCoeffY = pY(1)/2;
end

% Plot the MSD if desired
if get(findobj('Tag', 'ANALYZE_Trackset_MSD_0'), 'Value');
    figure('Name', data.ANALYZE.filename,'NumberTitle','off');
    hold on
    xArr = find(msdTot(:, 1));
    fplot(strcat('x*', num2str(p(1)), '+', num2str(p(2))), [0, 5*unitTime], '--r');
    plot(xArr.*unitTime, msdTot(:, 1)./(1000^2));
    errorbar(xArr.*unitTime, msdTot(:, 1)./(1000^2), msdTot(:, 2)./(1000^2.*sqrt(msdTot(:, 3))-1));
    title('MSD XY');
    xlabel('Time [s]');
    ylabel('Mean square displacement [\mum^2]');
    xlim([0, 15*unitTime]);
    text(0.1, 0.9, ['Diff. Coeff = ', num2str(diffCoeff), '\mum^2/s'], 'Units', 'normalized');
    text(0.1, 0.85, ['Offset = ', num2str(diffOffset), '\mum^2'], 'Units', 'normalized');
    hold off
    
    if isequal(data.ANALYZE.aligned, 'Yes')
        figure('Name', data.ANALYZE.filename,'NumberTitle','off');
        hold on
        xArr = find(msdTotX(:, 1));
        fplot(strcat('x*', num2str(pX(1)), '+', num2str(pX(2))), [0, 5*unitTime], '--r');
        plot(xArr.*unitTime, msdTotX(:, 1)./(1000^2));
        errorbar(xArr.*unitTime, msdTotX(:, 1)./(1000^2), msdTotX(:, 2)./(1000^2.*sqrt(msdTotX(:, 3))-1));
        title('MSD X');
        xlabel('Time [s]');
        ylabel('Mean square displacement [\mum^2]');
        xlim([0, 15*unitTime]);
        text(0.1, 0.9, ['Diff. Coeff = ', num2str(diffCoeffX), '\mum^2/s'], 'Units', 'normalized');
        text(0.1, 0.85, ['Offset = ', num2str(diffOffsetX), '\mum^2'], 'Units', 'normalized');
        hold off
        
        figure('Name', data.ANALYZE.filename,'NumberTitle','off');
        hold on
        xArr = find(msdTotY(:, 1));
        fplot(strcat('x*', num2str(pY(1)), '+', num2str(pY(2))), [0, 5*unitTime], '--r');
        plot(xArr.*unitTime, msdTotY(:, 1)./(1000^2));
        errorbar(xArr.*unitTime, msdTotY(:, 1)./(1000^2), msdTotY(:, 2)./(1000^2.*sqrt(msdTotY(:, 3))-1));
        title('MSD Y');
        xlabel('Time [s]');
        ylabel('Mean square displacement [\mum^2]');
        xlim([0, 15*unitTime]);
        text(0.1, 0.9, ['Diff. Coeff = ', num2str(diffCoeffY), '\mum^2/s'], 'Units', 'normalized');
        text(0.1, 0.85, ['Offset = ', num2str(diffOffsetY), '\mum^2'], 'Units', 'normalized');
        hold off
    end
end

% Calculate and plot the CDF if desired
if get(findobj('Tag', 'ANALYZE_Trackset_CDF_0'), 'Value');
    
    cumh = figure('Name', data.ANALYZE.filename,'NumberTitle','off');
    
    % Read in the min/max unit step lengths (in frames) for the CDF
    minStep = str2double(get(findobj('Tag', 'ANALYZE_Trackset_CDF_1'), 'String'));
    maxStep = str2double(get(findobj('Tag', 'ANALYZE_Trackset_CDF_2'), 'String'));
    minStep = minStep(1); maxStep = maxStep(1); % Fulhack f?r att fixa att maxStep blir [?, NaN]...
    
    i = 1;
    for stepLength = minStep:maxStep
        
        % Read out all the steplengths
        stepsTot = sqDisplTotCell{1, stepLength};
        
        
        
        
        if stepLength == 1
        % Assign it to a variable in the base workspace accessible from the prompt...
        assignin('base', 'steplengthXY', sqrt(stepsTot));
        if isequal(data.ANALYZE.aligned, 'Yes')
        stepsTotX = sqDisplTotCell{2, stepLength};
        assignin('base', 'steplengthX', sqrt(stepsTotX));
        stepsTotY = sqDisplTotCell{3, stepLength};
        assignin('base', 'steplengthY', sqrt(stepsTotY));
        end
        end
        
        
        
        
        
        % Get the CDF with lower and upper confidence bounds
        [f, x, flo, fup] = ecdf(sqrt(stepsTot));
        
        figure(cumh);
        hold on
        stairs(x, f, color{i});
        i = i+1;
        
        if i > 6
            i = 1;
        end
        if round(minStep) == round(maxStep)
            figure(cumh);
            stairs(x, flo, '--k');
            stairs(x, fup, '--k');
            legend('Empirical CDF','LCB','UCB','Location','SE')
        end
    end
    
    title('CDF XY');
    xlabel('Step length [nm]');
    ylabel('Cumulative probability');
    hold off
    
    if isequal(data.ANALYZE.aligned, 'Yes')
        
        cumXh = figure('Name', data.ANALYZE.filename,'NumberTitle','off');
        cumYh = figure('Name', data.ANALYZE.filename,'NumberTitle','off');
        i = 1;
        for stepLength = minStep:maxStep
            
            % Read out all the steplengths
            stepsTotX = sqDisplTotCell{2, stepLength};
            stepsTotY = sqDisplTotCell{3, stepLength};
            
            % Get the CDF with lower and upper confidence bounds
            [fX, xX, floX, fupX] = ecdf(sqrt(stepsTotX));
            [fY, xY, floY, fupY] = ecdf(sqrt(stepsTotY));
            
            figure(cumXh);
            hold on
            stairs(xX, fX, color{i});
            title('CDF X');
            xlabel('Step length [nm]');
            ylabel('Cumulative probability');
            
            figure(cumYh);
            hold on
            stairs(xY, fY, color{i});
            title('CDF Y');
            xlabel('Step length [nm]');
            ylabel('Cumulative probability');
            
            i = i+1;
            
            if i > 6
                i = 1;
            end
            if round(minStep) == round(maxStep)
                figure(cumYh);
                hold on
                stairs(xY, floY, '--k');
                stairs(xY, fupY, '--k');
                legend('Empirical CDF','LCB','UCB','Location','SE')
                
                figure(cumXh);
                hold on
                stairs(xX, floX, '--k');
                stairs(xX, fupX, '--k');
                legend('Empirical CDF','LCB','UCB','Location','SE')
                hold off
            end
        end
        
        figure(cumXh);
        title('CDF X');
        xlabel('Step length [nm]');
        ylabel('Cumulative probability');
        
        figure(cumYh);
        title('CDF Y');
        xlabel('Step length [nm]');
        ylabel('Cumulative probability');
        
    end
    
    
end



% % Thing to plot only the first point in a Traj 
% pos = zeros(2, length(finalTraj));
% for w = 1:length(finalTraj)
%     pos(:, w) = finalTraj{w}(1,1:2);
% 
% end
% figure;
% plot(pos(1, :), pos(2, :), '+r')

end




%%%%%%%%%%%%%%%%%%%%%%
% Callback functions %
% ================== %
%%%%%%%%%%%%%%%%%%%%%%

function LimitXYRes(~,~)

data = guidata(findobj('Tag','hSMT'));

activeInd = data.ANALYZE.activeInd;
xDev = data.ANALYZE.xDataDevOrig(activeInd);
yDev = data.ANALYZE.yDataDevOrig(activeInd);

    
% Read in limit for xy resolution to be shown and worked with.
resLimit = str2double(get(findobj('Tag', 'ANALYZE_Locset_fitError_1'), 'String'));

% Find all indices that dont meet the demands
xInd = find(xDev > resLimit);
yInd = find(yDev > resLimit);

% Remove duplicate indices
remInd = union(xInd, yInd);

% Remove them from the activeInd list
activeInd(remInd) = [];

data.ANALYZE.activeInd = activeInd;

guidata(findobj('Tag','hSMT'), data);

end




%%%%%%%%%%%%%%%%%%%
% Other functions %
% =============== %
%%%%%%%%%%%%%%%%%%%


function varout = scaled(varin)
%Read in the pixelscaling
scale = str2double(get(findobj('Tag', 'ANALYZE_label_scale_1'), 'String'));

varout = scale.*varin;

end

function varout = unscaled(varin)
%Read in the pixelscaling
scale = str2double(get(findobj('Tag', 'ANALYZE_label_scale_1'), 'String'));

varout = varin./scale;

end

function pG = pointGaussian(beta,xdata)
pG = beta(1)*exp(-.5*(bsxfun(@minus,xdata,beta(3:4)').^2)*(1./beta(5:6).^2)) + beta(2);
end

function [xData, yData] = align(hObj)

rotVar = [];
rotStep = 0.1;
for i = 0:1:180/rotStep
    rotate(hObj, [0 0 1], rotStep);
    yData = get(hObj, 'Ydata');
    rotVar = [rotVar, var(yData)];
end
[~, ind] = min(rotVar);
rotate(hObj, [0 0 1], 180+(ind-1)*rotStep);
yData = get(hObj, 'Ydata');
xData = get(hObj, 'Xdata');
set(hObj, 'Ydata', yData-min(yData));
axis equal;

end

function LoadNewData(varargin)

% Get filename and path with "uigetfile"
[filename, pathname] = uigetfile({'*.mat'}, 'Select struct file (.mat)');
if ( filename == 0 )
    disp('Error! No (or wrong) file selected!')
    return
end
cd(pathname);
full_filename = [ pathname, filename ];

% Load the .mat file
inStruct = load(full_filename);
data.ANALYZE = inStruct.LOCALIZE;
data.ANALYZE.filename = filename;

% If 3D has been used, set the used variables.
if data.ANALYZE.use3D
    % Update the edit fields for the calibration curves
    set(findobj('Tag', 'ANALYZE_label_3DcalX_1'), 'String', num2str(data.ANALYZE.xCal3D(1)), 'Visible', 'on');
    set(findobj('Tag', 'ANALYZE_label_3DcalX_2'), 'String', num2str(data.ANALYZE.xCal3D(2)), 'Visible', 'on');
    set(findobj('Tag', 'ANALYZE_label_3DcalX_3'), 'String', num2str(data.ANALYZE.xCal3D(3)), 'Visible', 'on');
    set(findobj('Tag', 'ANALYZE_label_3DcalX_4'), 'String', num2str(data.ANALYZE.xCal3D(4)), 'Visible', 'on');
    set(findobj('Tag', 'ANALYZE_label_3DcalY_1'), 'String', num2str(data.ANALYZE.yCal3D(1)), 'Visible', 'on');
    set(findobj('Tag', 'ANALYZE_label_3DcalY_2'), 'String', num2str(data.ANALYZE.yCal3D(2)), 'Visible', 'on');
    set(findobj('Tag', 'ANALYZE_label_3DcalY_3'), 'String', num2str(data.ANALYZE.yCal3D(3)), 'Visible', 'on');
    set(findobj('Tag', 'ANALYZE_label_3DcalY_4'), 'String', num2str(data.ANALYZE.yCal3D(4)), 'Visible', 'on');
    
    % Set other variables
    set(findobj('Tag', 'ANALYZE_label_3DpsfSize_1'), 'String', num2str(data.ANALYZE.psfLimits(1)), 'Visible', 'on');
    set(findobj('Tag', 'ANALYZE_label_3DpsfSize_2'), 'String', num2str(data.ANALYZE.psfLimits(2)), 'Visible', 'on');
    set(findobj('Tag', 'ANALYZE_label_3DzRange_1'), 'String', num2str(data.ANALYZE.zLimits(1)), 'Visible', 'on');
    set(findobj('Tag', 'ANALYZE_label_3DzRange_2'), 'String', num2str(data.ANALYZE.zLimits(2)), 'Visible', 'on');
    set(findobj('Tag', 'ANALYZE_label_3DD_1'), 'String', data.ANALYZE.dist3D, 'Visible', 'on');
    set(findobj('Tag', 'ANALYZE_label_cal3DPath_0'), 'String', data.ANALYZE.cal3DPath, 'Visible', 'on');
    
else
    % Update the edit fields for the calibration curves
    set(findobj('Tag', 'ANALYZE_label_3DcalX_1'), 'String', '0');
    set(findobj('Tag', 'ANALYZE_label_3DcalX_2'), 'String', '0');
    set(findobj('Tag', 'ANALYZE_label_3DcalX_3'), 'String', '0');
    set(findobj('Tag', 'ANALYZE_label_3DcalX_4'), 'String', '0');
    set(findobj('Tag', 'ANALYZE_label_3DcalY_1'), 'String', '0');
    set(findobj('Tag', 'ANALYZE_label_3DcalY_2'), 'String', '0');
    set(findobj('Tag', 'ANALYZE_label_3DcalY_3'), 'String', '0');
    set(findobj('Tag', 'ANALYZE_label_3DcalY_4'), 'String', '0');
    
    % Set other variables
    set(findobj('Tag', 'ANALYZE_label_3DpsfSize_1'), 'String', '0');
    set(findobj('Tag', 'ANALYZE_label_3DpsfSize_2'), 'String', '0');
    set(findobj('Tag', 'ANALYZE_label_3DzRange_1'), 'String', '0');
    set(findobj('Tag', 'ANALYZE_label_3DzRange_2'), 'String', '0');
    set(findobj('Tag', 'ANALYZE_label_3DD_1'), 'String', '0');
    set(findobj('Tag', 'ANALYZE_label_cal3DPath_0'), 'String', '-');

end

if data.ANALYZE.photons
    
    set(findobj('Tag', 'ANALYZE_label_baseline_1'), 'String', data.ANALYZE.EMCCDBaseline, 'Visible', 'on');
    set(findobj('Tag', 'ANALYZE_label_gain_1'), 'String', data.ANALYZE.EMCCDGain, 'Visible', 'on');
    set(findobj('Tag', 'ANALYZE_label_minPhoton_1'), 'String', data.ANALYZE.photonTh, 'Visible', 'on');
    
else
    set(findobj('Tag', 'ANALYZE_label_baseline_1'), 'String', '0');
    set(findobj('Tag', 'ANALYZE_label_gain_1'), 'String', '1');
    set(findobj('Tag', 'ANALYZE_label_minPhoton_1'), 'String', '0');
end


% Update the fields for scale and other small things
set(findobj('Tag', 'ANALYZE_label_scale_1'), 'String', data.ANALYZE.scale);
set(findobj('Tag', 'ANALYZE_label_fitError_1'), 'String', data.ANALYZE.maxxyUnCert);
set(findobj('Tag', 'ANALYZE_label_fitWindow_1'), 'String', data.ANALYZE.fitWindowSize);
set(findobj('Tag', 'ANALYZE_label_cropped_0'), 'String', data.ANALYZE.cropped);
set(findobj('Tag', 'ANALYZE_label_aligned_0'), 'String', data.ANALYZE.aligned);
set(findobj('Tag', 'ANALYZE_label_corrected_0'), 'String', data.ANALYZE.corrected);


% Put in the file and pathname in the GUI
set(findobj('Tag','ANALYZE_label_filename'),'String',filename);
set(findobj('Tag','ANALYZE_label_pathname'),'String',pathname);

% Put in data from the DETECT interface
set(findobj('Tag', 'ANALYZE_label_gaussian'), 'String', sprintf('[%g, %g]', data.ANALYZE.gaussian));
set(findobj('Tag', 'ANALYZE_label_mexiHat'), 'String', sprintf('[%g, %g]', data.ANALYZE.mexiHat));
set(findobj('Tag', 'ANALYZE_label_relIntTh'), 'String', data.ANALYZE.relIntTh);
set(findobj('Tag', 'ANALYZE_label_intTh'), 'String', data.ANALYZE.intTh);
set(findobj('Tag', 'ANALYZE_label_globalScale'), 'String', data.ANALYZE.globalScale);

% Put in the value for time between frames in the tracking section
    set(findobj('Tag', 'ANALYZE_Trackset_timeStep_1'), 'String', data.ANALYZE.timeBetweenFrames);


% Save the struct in the GUI handler
guidata(findobj('Tag','hSMT'), data);

end
























