%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                 %
% SMT - Single Molecule Tracking                  %
% ==================================              %
%                                                 %
%    Copyright (C) 2011 Fredrik Persson           %
%    Email: freddie.persson@gmail.com             %
%                                                 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%    This file is part of SMT - Single Molecule Tracking.
%
%     SMT is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
%
%     SMT is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details.
%
%     You should have received a copy of the GNU General Public License
%     along with SMT.  If not, see <http://www.gnu.org/licenses/>.



%%%%%%%%%%%%%%%%%%
% Main functions %
% ============== %
%%%%%%%%%%%%%%%%%%


function vargout = DetectMolecules_Test(varargin)

clear all
try
    close(findobj('Tag', 'hDET'));
catch
end

% Add Tools directory
dir0=pwd;
addpath(genpath([dir0 filesep '..' filesep '..' filesep 'Tools']))

f1 = figure('Visible','off');

% Create main figure
hFig = figure(...
    'Units','pixels',...
    'Tag','hDET',...
    'MenuBar','none',...
    'Toolbar','none',...
    'NumberTitle','off',...
    'Visible','off',...
    'Position',[0 0 1 1],...
    'Resize','off',...
    'Colormap',hot);

% Font and font size
font = 'Ariel';
fontsize = 13;

if ispc || isunix
    fontsize = fontsize*(72/96);
end

%Draw all the panes etc
drawContent(hFig, font, fontsize);

% Load Data to GUI
LoadNewData;

% Set window visible
% 	movegui(hFig,'north');
set(hFig,'Visible','on');

close(f1)
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Draw GUI content functions %
% ========================== %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


function drawContent(hObject,varargin)

% Delete previous content
delete(get(hObject,'Children'));

% Set name of window
set(hObject,'Name','SMT_Detect - Detect Molecule Positions from ROI');


% Dimensions
pw = 450; axh = 450 - 20;

bw = 90; bh = 25;

sh = 30;

th = 20;

brh = 47;

roiSelH = 20 + axh + sh + 10;
dataInfoH = 20 + 7*(th + 5) + 5;

projAxH = 225;
filtH = 20 + 8*(th+5) + 5;

rH = brh + 10 + filtH + 10 + projAxH + 10 + projAxH + 20;
lH = brh + 10 + dataInfoH + 10 + roiSelH + 20;

h = max(rH,lH);
w = 20 + pw + 20 + pw + 20;

if (rH > lH)
    dataInfoH = dataInfoH + (rH-lH);
elseif (rH < lH)
    filtH = filtH + (lH-rH);
end

yr1 = h - (20 + projAxH);
yr2 = yr1 - (10 + projAxH);
yr3 = yr2 - (10 + filtH);

yl1 = h - (20 + roiSelH);
yl2 = yl1 - (10 + dataInfoH);

x1 = 20;
x2 = x1 + pw + 20;

set(hObject,'Position',[0 0 w h]);

%System font
font = varargin{1};
fontsize = varargin{2};

% Button Row Panel
hButtonPanel = uibuttongroup(...
    'Parent',hObject,...
    'Tag','DETECT_panel_buttonRow',...
    'Units','pixels',...
    'BackgroundColor',get(hObject,'Color'),...
    'visible','on',...
    'BorderType','none',...
    'Position',[0 0 w brh]);
uiButtonRowPanel(hButtonPanel, 0, fontsize, font);

% ROI Selection Panel
hROISelectionPanel = uibuttongroup(...
    'Parent',hObject,...
    'Tag','DETECT_panel_roiSelection',...
    'Title','Select Region Of Interest (ROI)',...
    'FontName', font ,...
    'FontSize',10,...
    'Units','pixels',...
    'BackgroundColor',get(hObject,'Color'),...
    'Position',[x1 yl1 pw roiSelH]);
uiROISelectionPanel(hROISelectionPanel, 0, fontsize, font);

% Trace Extraction Info Panel
hDataInfoPanel = uibuttongroup(...
    'Parent',hObject,...
    'Tag','DETECT_panel_dataInfo',...
    'Title','Trace Extraction Info',...
    'FontName', font ,...
    'FontSize',10,...
    'Units','pixels',...
    'BackgroundColor',get(hObject,'Color'),...
    'Position',[x1 yl2 pw dataInfoH]);
uiDataInfoPanel(hDataInfoPanel, 0, fontsize, font);

% Horizontal Projection Panel
hHProjPanel = uibuttongroup(...
    'Parent',hObject,...
    'Tag','DETECT_panel_hProj',...
    'Title','Horizontal projection of ROI',...
    'FontName', font ,...
    'FontSize',10,...
    'Units','pixels',...
    'BackgroundColor',get(hObject,'Color'),...
    'Position',[x2 yr1 pw projAxH]);
uiHorizontalProjectionPanel(hHProjPanel);

% Vertical Projection Panel
hVProjPanel = uibuttongroup(...
    'Parent',hObject,...
    'Tag','DETECT_panel_hProj',...
    'Title','Vertical projection of ROI',...
    'FontName', font ,...
    'FontSize',10,...
    'Units','pixels',...
    'BackgroundColor',get(hObject,'Color'),...
    'Position',[x2 yr2 pw projAxH]);
uiVerticalProjectionPanel(hVProjPanel);

% Filtering Panel
hFilteringPanel = uibuttongroup(...
    'Parent',hObject,...
    'Tag','DETECT_panel_hProj',...
    'Title','Filtering',...
    'FontName', font ,...
    'FontSize',10,...
    'Units','pixels',...
    'BackgroundColor',get(hObject,'Color'),...
    'Position',[x2 yr3 pw filtH]);
uiFilterPanel(hFilteringPanel, 0, fontsize, font);

end




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Panel construction functions %
% ============================ %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


function uiButtonRowPanel(hObject,~,varargin)

% Dimensions
pos = get(hObject,'Position');

w = pos(3);
h = pos(4);

bw = 90; bh = 25;

% Close button
uicontrol(...
    'Parent',hObject,...
    'Units','pixels',...
    'Style','pushbutton',...
    'String','Close',...
    'FontName', varargin{end} ,...
    'FontSize',varargin{end-1},...
    'Position',[w-(bw+20) 10 bw bh],...
    'Callback',{@CloseButton});

% Load TIF
uicontrol(...
    'Parent',hObject,...
    'Units','pixels',...
    'Style','pushbutton',...
    'TooltipString','Load new file.',...
    'String','Load new TIF',...
    'FontName', varargin{end} ,...
    'FontSize',varargin{end-1},...
    'Position',[w-(3*bw+20) 10 2*bw bh],...
    'Callback',{@LoadTIFButton});

	% About button
	uicontrol(...
		'Parent',hObject,...
		'Units','pixels',...
		'Style','pushbutton',...
		'TooltipString','Brings up an About box.',...
		'String','About',...
		'Position',[w-(5*bw+20) 10 bw bh],...
		'Callback',{@aboutButton});

% Edit field to set max # of black frames to replace empty frames.
uicontrol(...
    'Parent',hObject,...
    'Tag','DETECT_save_blackFrames_0',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Style','edit',...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Max number of black empty frames in a row.',...
    'String','3',...
    'FontName', varargin{end} ,...
    'Callback',{},...
    'Position',[20 30 0.5*bw bh]);

uicontrol(...	% Note
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Max number of black frames in a row.',...
    'FontName', varargin{end} ,...
    'Position',[20+0.5*bw 30 1.5*bw bh]);

% Save TIF stack without "empty frames" button.
uicontrol(...
    'Parent',hObject,...
    'Units','pixels',...
    'Style','pushbutton',...
    'TooltipString','Save TIF stack without "empty frames" according to the set thresholding.',...
    'String','Save TIF without empty frames',...
    'FontName', varargin{end} ,...
    'FontSize',varargin{end-1},...
    'Position',[20 5 2*bw bh],...
    'Callback',{@SaveTIFButton});


% Save MAT struct with "position frames" in between.
uicontrol(...
    'Parent',hObject,...
    'Units','pixels',...
    'Style','pushbutton',...
    'TooltipString','Save MAT struct with peakmarked frames between, according to the set thresholding.',...
    'String','Save MAT incl pos frames',...
    'FontName', varargin{end} ,...
    'FontSize',varargin{end-1},...
    'Position',[20+2*bw 5 2*bw bh],...
    'Callback',{@SaveMATButton, 1});

% 	% Extract Plots button
% 	uicontrol(...
% 		'Parent',hObject,...
% 		'Units','pixels',...
% 		'Style','pushbutton',...
% 		'TooltipString','Dump all plots into a new window.',...
% 		'String','Extract Plots',...
% 		'Visible','off',...
% 		'Position',[20+bw 10 bw bh],...
% 		'Callback',{@ExtractPlotsButton});

end

function uiROISelectionPanel(hObject,~,varargin)

% Dimensions
pos = get(hObject,'Position');

w = pos(3);
h = pos(4);

axw = 450 - 20; axh = 450 - 20;

bw = 90; bh = 25;

sh = 30;

x1 = 10;
x2 = x1 + axw;

y1 = h - (20 + axh);
y2 = y1 - (sh);
y3 = y2 - (sh);

% Calculate Variables
stackSize = 2;
frameNumber = 1;
original = rand(10);
current = original;

% ROI Selection Axes
hAx = axes(...
    'Parent',hObject,...
    'Units','pixels',...
    'Position',[x1 y1 axw axh],...
    'Visible','on');
hImsc = imagesc(current,[min(min(current)) max(max(current))]);
set(hImsc,'Parent',hAx,...
    'Tag','DETECT_imgsc_roiSelection',...
    'CDataMapping','scaled',...
    'Visible','on');
axis(hAx,'off','tight','xy');

%Set Pixel value Info tool
hPixelValPanel = impixelinfo;
set(hPixelValPanel, 'Position', [30 270 150 20]);

% 	line(...
% 		'Parent',hAx,...
% 		'XData',[0 0],...
% 		'YData',[0 0],...
% 		'Color','b',...
% 		'Tag','DETECT_orig_rrLine');
% 	l1 = legend(hAx,...
% 		'Robust Regression');
% 	set(l1,...
% 		'Location','NorthEast',...
% 		'Box','off',...
% 		'Color','none',...
% 		'TextColor',[1 1 1]);

% Add selection tool to main axes
so = size(current);
selection = round([.4*so(2) .4*so(1) .2*so(2) .2*so(1)]);

roiSelTool = imrect(hAx,selection);
addNewPositionCallback(roiSelTool,@ROISelectionChange);

fcn = makeConstrainToRectFcn('imrect',[1 so(2)],[1 so(1)]);
setPositionConstraintFcn(roiSelTool,fcn);
clear so;

% Scroll bar and Label
uicontrol(...	% Scrollbar
    'Parent',hObject,...
    'Tag','DETECT_scrollbar_frameNumber',...
    'Style','slider',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontName', varargin{end} ,...    
    'FontSize',varargin{end-1},...
    'Max',stackSize,...
    'Min',1,...
    'SliderStep',[1 10] / (stackSize-1),...
    'Value',1,...
    'Position',[x1 y2 axw sh],...
    'Callback',{@ScrollImage},...
    'Enable','on');
% 	uicontrol(...	% Label
% 		'Parent',hObject,...
% 		'Style','text',...
% 		'Units','pixels',...
% 		'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
% 		'FontSize',10,...
% 		'HorizontalAlignment','center',...
% 		'String','Change current frame number by using scrollbar',...
% 	   'Position',[x1 y2-5 axw 20]);
uicontrol(...	% Label
    'Parent',hObject,...
    'Tag','DETECT_label_FrameNumber',...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'BackgroundColor','black',...
    'ForegroundColor','white',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','center',...
    'String',sprintf('Current frame: %g',frameNumber),...
    'FontName', varargin{end} ,...
    'Position',[x1+(axw-120) y1 120 18]);

% Store gui data
data.DETECT.stackSize = stackSize;
data.DETECT.frameNumber = frameNumber;
data.DETECT.original = original;
data.DETECT.current = current;

data.DETECT.roiSelTool = roiSelTool;

data.DETECT.selection = selection;

guidata(findobj('Tag','hDET'),data);

end

function uiDataInfoPanel(hObject,~,varargin)

% Dimensions
pos = get(hObject,'Position');

w = pos(3);
h = pos(4);

bw = 150; bh = 25;

lw = 100; lh = 20;

tw = round(w/2) - (10 + lw + 5 + 5);

x1 = 10;
x2 = x1 + lw + 5;
x3 = round(w/2)+5;
x4 = x3 + lw + 5;

y1 = h - (20 + lh);
y2 = y1 - (lh + 15);
y3 = y2 - (lh + 5);
y4 = y3 - (lh + 5);
y5 = y4 - (lh + 5);
y6 = y5 - (lh + 5);
y7 = y6 - (lh + 5);

% Load Data
data = guidata(findobj('Tag','hDET'));

%	filename = data.DETECT.filename;
original = data.DETECT.original;
stackSize = data.DETECT.stackSize;
selection = data.DETECT.selection;

% Calculate variables
filename = '-';
chPos = zeros(3,2);

% LABEL - Filename
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Filename:',...
    'FontName', varargin{end} ,...
    'Position',[x1 y1 lw lh]);
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String',filename,...
    'FontName', varargin{end} ,...
    'Position',[x2 y1-10 w-(x2+10) lh+10],...
    'Tag','DETECT_label_filename');

% LABEL - Stack Size
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Stack Size:',...
    'FontName', varargin{end} ,...
    'Position',[x1 y2 lw lh]);
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String',sprintf('%g',stackSize),...
    'FontName', varargin{end} ,...
    'Position',[x2 y2 tw lh],...
    'Tag','DETECT_label_stackSize');

% LABEL - Frame Size
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Frame Size:',...
    'FontName', varargin{end} ,...
    'Position',[x1 y3 lw lh]);
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String',sprintf('[%g,%g]',size(original)),...
    'FontName', varargin{end} ,...
    'Position',[x2 y3 tw lh],...
    'Tag','DETECT_label_frameSize');

% LABEL - ROI Data
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','ROI Data:',...
    'FontName', varargin{end} ,...
    'Position',[x1 y5 lw 2*lh+5]);
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String',sprintf('x = %g\t\ty = %g\nw = %g\t\th = %g',selection),...
    'FontName', varargin{end} ,...
    'Position',[x2 y5 tw 2*lh+5],...
    'Tag','DETECT_label_roi');


% LABEL - Intensity Threshold
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Intensity Threshold:',...
    'FontName', varargin{end} ,...
    'Position',[x1 y6-10 lw 2*lh+5],...
    'Enable','on');
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','70%',...
    'FontName', varargin{end} ,...
    'Position',[x2 y6-10 tw 2*lh+5],...
    'Tag','DETECT_label_IntensityThreshold',...
    'Enable','on');
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1}-2,...
    'HorizontalAlignment','left',...
    'String','Change by dragging marker at right edge of projection axes.',...
    'FontName', varargin{end} ,...
    'Position',[x1 y6-20 lw+tw+5 lh+5],...
    'Enable','on');


% BUTTON - Use global intensity scaling
uicontrol(...
    'Parent',hObject,...
    'Units','pixels',...
    'Style','pushbutton',...
    'String', 'Global Scaling',...
    'FontName', varargin{end} ,...
    'FontSize',varargin{end-1},...
    'Position',[x3 y4 bw bh],...
    'Callback', {@IntensScaleButton},...
    'Tag','DETECT_label_intensScale_0',...
    'Enable','on');
% Edit box to set the max
uicontrol(...	% Size
    'Parent',hObject,...
    'Style','edit',...
    'Tag','DETECT_label_intensScale_1',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Set the max value of global scaling manually',...
    'String','0',...
    'FontName', varargin{end} ,...
    'Callback',{},...
    'Position',[x4+50 y4+4 50 lh]);


% BUTTON - Show only Thresholded Values
uicontrol(...
    'Parent',hObject,...
    'Units','pixels',...
    'Style','pushbutton',...
    'String', 'Thresholded image',...
    'FontName', varargin{end} ,...
    'FontSize',varargin{end-1},...
    'Position',[x3 y4-(bh+10) bw bh],...
    'Callback', {@ShowThresholdButton},...
    'Enable','on');


data.DETECT.toggleValues = false;

guidata(findobj('Tag','hDET'),data);

end

function uiHorizontalProjectionPanel(hObject,~,varargin)

% Dimensions
pos = get(hObject,'Position');

w = pos(3);
h = pos(4);

axw = 450 - 20; axh = 225 - (20+10);

% Load Data
data = guidata(findobj('Tag','hDET'));

current = data.DETECT.current;
frame = data.DETECT.frameNumber;
selection = data.DETECT.selection;

s = round(selection);
roi = current(s(2):s(2)+s(4)-1,s(1):s(1)+s(3)-1);

% Horizontal Projection Axes
hHProjAxes = axes(...
    'Parent',hObject,...
    'Units','pixels',...
    'Tag','DETECT_axes_HProj',...
    'Position',[10 10 axw axh],...
    'Visible','on',...
    'Color','none');
mesh(hHProjAxes,...
    roi,...
    'Tag','DETECT_plot_HProj',...
    'FaceColor','none');
set(hHProjAxes,...
    'Tag','DETECT_axes_HProj',...
    'XLim',[1 selection(4)],...
    'YLim',[1 selection(3)],...
    'Color','none',...
    'DrawMode','fast');
axis(hHProjAxes,'off');
view(hHProjAxes,[-90 0]);

% Add Intensity Threshold Selection Tool
relIntTh = .7;
hHSelAxes = axes(...
    'Parent',hObject,...
    'Tag','DETECT_HSelAxes',...
    'Units','pixels',...
    'Position',get(hHProjAxes,'Position'),...
    'Visible','on',...
    'Color','none',...
    'XLim',[1 100],...
    'YLim',[0 1]);
axis(hHSelAxes,'off');
line([1 100],[relIntTh relIntTh],...
    'Parent',hHSelAxes,...
    'Color','k',...
    'LineStyle',':',...
    'Tag','DETECT_selTool_Hth')
hSelThH = impoint(hHSelAxes,[100 relIntTh]);
setColor(hSelThH,'k');
hConFcnH = makeConstrainToRectFcn('impoint',[100 100],[0 1]);
setPositionConstraintFcn(hSelThH,hConFcnH);
addNewPositionCallback(hSelThH,@IntensityThresholdChange);

% Store gui data
data.DETECT.relIntTh = relIntTh;
data.DETECT.hSelThH = hSelThH;

guidata(findobj('Tag','hDET'),data);

end

function uiVerticalProjectionPanel(hObject,~,varargin)

% Dimensions
pos = get(hObject,'Position');

w = pos(3);
h = pos(4);

axw = 450 - 20; axh = 225 - (20+10);

% Load Data
data = guidata(findobj('Tag','hDET'));

current = data.DETECT.current;
frame = data.DETECT.frameNumber;
selection = data.DETECT.selection;

s = round(selection);
roi = current(s(2):s(2)+s(4)-1,s(1):s(1)+s(3)-1);

% Vertical Projection Axes
hVProjAxes = axes(...
    'Parent',hObject,...
    'Units','pixels',...
    'Tag','DETECT_axes_VProj',...
    'Position',[10 10 axw axh],...
    'Visible','on',...
    'Color','none');
mesh(hVProjAxes,...
    roi,...
    'Tag','DETECT_plot_VProj',...
    'FaceColor','none');
set(hVProjAxes,...
    'Tag','DETECT_axes_VProj',...
    'XLim',[1 selection(4)],...
    'YLim',[1 selection(3)],...
    'Color','none',...
    'DrawMode','fast');
axis(hVProjAxes,'off');
view(hVProjAxes,[0 0]);

% Add Intensity Threshold Selection Tool
relIntTh = .7;
hVSelAxes = axes(...
    'Parent',hObject,...
    'Tag','DETECT_VSelAxes',...
    'Units','pixels',...
    'Position',get(hVProjAxes,'Position'),...
    'Visible','on',...
    'Color','none',...
    'XLim',[1 100],...
    'YLim',[0 1]);
axis(hVSelAxes,'off');
line([1 100],[relIntTh relIntTh],...
    'Parent',hVSelAxes,...
    'Color','k',...
    'LineStyle',':',...
    'Tag','DETECT_selTool_Vth')
hSelThV = impoint(hVSelAxes,[100 relIntTh]);
setColor(hSelThV,'k');
hConFcnV = makeConstrainToRectFcn('impoint',[100 100],[0 1]);
setPositionConstraintFcn(hSelThV,hConFcnV);
addNewPositionCallback(hSelThV,@IntensityThresholdChange);

% Store gui data
data.DETECT.relIntTh = relIntTh;
data.DETECT.hSelThV = hSelThV;

guidata(findobj('Tag','hDET'),data);

end

function uiFilterPanel(hObject,~,varargin)

% Dimensions
pos = get(hObject,'Position');

% Global positions
w = pos(3);	h = pos(4);

% Label height/width
lw = 120; lh = 23;

% Edit box height/width
ew = 50; eh = lh;

% Note height/width
nw = w - (10 + lw + ew + ew + 10); nh = lh;

% Start positions
x1 = 10;
x2 = x1 + lw;
x3 = x2 + ew;
x4 = x3 + ew;

y1 = h - (20 + lh);
y2 = y1 - (lh + 5);
y3 = y2 - (lh + 5);
y4 = y3 - (lh + 5);
y5 = y4 - (lh + 5);
y6 = y5 - (lh + 5);
y7 = y6 - (lh + 5);

% Titles
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Filter type:',...
    'FontName', varargin{end} ,...
    'Position',[x1 y1 lw lh]);
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','center',...
    'String','(1)',...
    'FontName', varargin{end} ,...
    'Position',[x2 y1 ew lh]);
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','center',...
    'String','(2)',...
    'FontName', varargin{end} ,...
    'Position',[x3 y1 ew lh]);
uicontrol(...
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'HorizontalAlignment','left',...
    'String','Notes',...
    'FontName', varargin{end} ,...
    'Position',[x4 y1 nw lh]);

% Lorentzian of Gaussian
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','checkbox',...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Rotationally symmetric LoG filter of size (1), and standard deviation (2)',...
    'String','MexiHat',...
    'FontName', varargin{end} ,...
    'Position',[x1 y2 lw lh],...
    'Callback',{@AdjustImage,'gaussian'},...
    'Tag','DETECT_filt_log_0',...
    'Enable','on');
uicontrol(...	% Size
    'Parent',hObject,...
    'Style','edit',...
    'Tag','DETECT_filt_log_1',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Rotationally symmetric filter LoG of size (1), and standard deviation (2)',...
    'String','9',...
    'FontName', varargin{end} ,...
    'Callback',{@AdjustImage,'log'},...
    'Position',[x2 y2 ew lh]);
uicontrol(...	% Sigma
    'Parent',hObject,...
    'Style','edit',...
    'Tag','DETECT_filt_log_2',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Rotationally symmetric LoG filter of size (1), and standard deviation (2)',...
    'String','1.3',...
    'FontName', varargin{end} ,...
    'Callback',{@AdjustImage,'log'},...
    'Position',[x3 y2 ew lh]);
uicontrol(...	% Note
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1}-2,...
    'HorizontalAlignment','left',...
    'String','Rotationally symmetric LoG filter of size (1), and standard deviation (2)',...
    'FontName', varargin{end} ,...
    'Position',[x4 y2 nw lh]);

% Gaussian
uicontrol(...	% Title
    'Parent',hObject,...
    'Style','checkbox',...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Rotationally symmetric Gaussian lowpass filter of size (1), and standard deviation (2)',...
    'String','Gaussian',...
    'FontName', varargin{end} ,...
    'Position',[x1 y3 lw lh],...
    'Callback',{@AdjustImage,'gaussian'},...
    'Tag','DETECT_filt_gauss_0',...
    'Enable','on');
uicontrol(...	% Size
    'Parent',hObject,...
    'Style','edit',...
    'Tag','DETECT_filt_gauss_1',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Rotationally symmetric Gaussian lowpass filter of size (1), and standard deviation (2)',...
    'String','7',...
    'FontName', varargin{end} ,...
    'Callback',{@AdjustImage,'gaussian'},...
    'Position',[x2 y3 ew lh]);
uicontrol(...	% Sigma
    'Parent',hObject,...
    'Style','edit',...
    'Tag','DETECT_filt_gauss_2',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Rotationally symmetric Gaussian lowpass filter of size (1), and standard deviation (2)',...
    'String','1',...
    'FontName', varargin{end} ,...
    'Callback',{@AdjustImage,'gaussian'},...
    'Position',[x3 y3 ew lh]);
uicontrol(...	% Note
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1}-2,...
    'HorizontalAlignment','left',...
    'String','Rotationally symmetric Gaussian lowpass filter of size (1), and standard deviation (2)',...
    'FontName', varargin{end} ,...
    'Position',[x4 y3 nw lh]);

% Average
uicontrol(...
    'Parent',hObject,...
    'Style','checkbox',...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Averageing filter of width (1) and height (2)',...
    'String','Average',...
    'FontName', varargin{end} ,...
    'Position',[x1 y4 lw lh],...
    'Callback',{@AdjustImage,'average'},...
    'Tag','DETECT_filt_avr_0',...
    'Enable','off');
uicontrol(...	% Width
    'Parent',hObject,...
    'Style','edit',...
    'Tag','DETECT_filt_avr_1',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Averageing filter of width (1) and height (2)',...
    'String','5',...
    'FontName', varargin{end} ,...
    'Position',[x2 y4 ew lh],...
    'Callback',{@AdjustImage,'average'});
uicontrol(...	% Height
    'Parent',hObject,...
    'Style','edit',...
    'Tag','DETECT_filt_avr_2',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Averageing filter of width (1) and height (2)',...
    'String','3',...
    'FontName', varargin{end} ,...
    'Position',[x3 y4 ew lh],...
    'Callback',{@AdjustImage,'average'});
uicontrol(...	% Note
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1}-2,...
    'HorizontalAlignment','left',...
    'String','Averageing filter of width (1) and height (2)',...
    'FontName', varargin{end} ,...
    'Position',[x4 y4 nw lh]);

% 	% Disk
% 	uicontrol(...
% 		'Parent',hObject,...
% 		'Style','checkbox',...
% 		'Units','pixels',...
% 		'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
% 		'FontSize',10,...
% 		'TooltipString','Circular averageing filter of radius (1).',...
% 		'String','Disk',...
% 	   'Position',[x1 y4 lw lh],...
% 		'Callback',{@AdjustImage,'disk'},...
% 		'Tag','DETECT_filt_disk_0',...
% 		'Enable','on');
% 	uicontrol(...	% Radius
% 		'Parent',hObject,...
% 		'Tag','DETECT_filt_disk_1',...
% 		'Style','edit',...
% 		'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
% 		'Units','pixels',...
% 		'FontSize',10,...
% 		'TooltipString','Circular averageing filter of radius (1).',...
% 		'String','5',...
% 	   'Callback',{@AdjustImage,'disk'},...
% 		'Position',[x2 y4 ew lh]);
% 	uicontrol(...	% Note
% 		'Parent',hObject,...
% 		'Style','text',...
% 		'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
% 		'Units','pixels',...
% 		'FontSize',8,...
% 		'HorizontalAlignment','left',...
% 		'String','Circular averageing filter of radius (1).',...
% 	   'Position',[x4 y4 nw lh]);
%
% TopHat filtering
uicontrol(...
    'Parent',hObject,...
    'Style','checkbox',...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','TopHat filtering of radius (1).',...
    'String','TopHat',...
    'FontName', varargin{end} ,...
    'Position',[x1 y5 lw lh],...
    'Callback',{@AdjustImage,'tophat'},...
    'Tag','DETECT_filt_tophat_0',...
    'Enable','off');
uicontrol(...	% Radius
    'Parent',hObject,...
    'Tag','DETECT_filt_tophat_1',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Style','edit',...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','TopHat filtering of radius (1).',...
    'String','5',...
    'FontName', varargin{end} ,...
    'Callback',{@AdjustImage,'tophat'},...
    'Position',[x2 y5 ew lh]);
uicontrol(...	% Note
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1}-2,...
    'HorizontalAlignment','left',...
    'String','TopHat filtering of radius (1).',...
    'FontName', varargin{end} ,...
    'Position',[x4 y5 nw lh]);

% Wiener
uicontrol(...
    'Parent',hObject,...
    'Style','checkbox',...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Lowpass Wiener filter of width (1), and height (2).',...
    'String','Wiener',...
    'FontName', varargin{end} ,...
    'Position',[x1 y6 lw lh],...
    'Callback',{@AdjustImage,'wiener'},...
    'Tag','DETECT_filt_wiener_0',...
    'Enable','off');
uicontrol(...	% Width
    'Parent',hObject,...
    'Tag','DETECT_filt_wiener_1',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Style','edit',...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Lowpass Wiener filter of width (1), and height (2).',...
    'String','5',...
    'FontName', varargin{end} ,...
    'Callback',{@AdjustImage,'wiener'},...
    'Position',[x2 y6 ew lh]);
uicontrol(...	% Height
    'Parent',hObject,...
    'Style','edit',...
    'Tag','DETECT_filt_wiener_2',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','Lowpass Wiener filter of width (1), and height (2).',...
    'String','2',...
    'FontName', varargin{end} ,...
    'Callback',{@AdjustImage,'wiener'},...
    'Position',[x3 y6 ew lh]);
uicontrol(...	% Note
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1}-2,...
    'HorizontalAlignment','left',...
    'String','Lowpass Wiener filter of width (1), and height (2).',...
    'FontName', varargin{end} ,...
    'Position',[x4 y6 nw lh]);

% Imhmax
uicontrol(...
    'Parent',hObject,...
    'Style','checkbox',...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','ImH transform that suppresses all maxima with heights less than (1).',...
    'String','ImH Transf',...
    'FontName', varargin{end} ,...
    'Position',[x1 y7 lw lh],...
    'Callback',{@AdjustImage,'imh'},...
    'Tag','DETECT_filt_imh_0',...
    'Enable','off');
uicontrol(...	% Length
    'Parent',hObject,...
    'Tag','DETECT_filt_imh_1',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Style','edit',...
    'Units','pixels',...
    'FontSize',varargin{end-1},...
    'TooltipString','ImH transform that suppresses all maxima with heights less than (1).',...
    'String','10',...
    'FontName', varargin{end} ,...
    'Callback',{@AdjustImage,'imh'},...
    'Position',[x2 y7 ew lh]);
uicontrol(...	% Note
    'Parent',hObject,...
    'Style','text',...
    'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
    'Units','pixels',...
    'FontSize',varargin{end-1}-2,...
    'HorizontalAlignment','left',...
    'String','ImH transform that suppresses all maxima with heights less than (1).',...
    'FontName', varargin{end} ,...
    'Position',[x4 y7 nw lh]);

% 	% Multiple frames
% 	uicontrol(...
% 		'Parent',hObject,...
% 		'Style','checkbox',...
% 		'Tag','DETECT_filt_multiframe_0',...
% 		'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
% 		'Units','pixels',...
% 		'FontSize',10,...
% 		'HorizontalAlignment','left',...
% 		'TooltipString','Multiple frame average. (1) no. frames to average.',...
% 		'String','Multiple frames',...
% 		'Callback',{@AdjustImage,'multiframe'},...
% 	   'Position',[x1 y7 lw lh]);
% 	uicontrol(...	% Number of frames
% 		'Parent',hObject,...
% 		'Style','edit',...
% 		'Tag','DETECT_filt_multiframe_1',...
% 		'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
% 		'Units','pixels',...
% 		'FontSize',10,...
% 		'TooltipString','Multiple frame average. (1) no. frames to average.',...
% 		'String','5',...
% 		'Callback',{@AdjustImage,'multiframe'},...
% 	   'Position',[x2 y7 ew lh]);
% 	uicontrol(...	% Note
% 		'Parent',hObject,...
% 		'Style','text',...
% 		'BackgroundColor',get(findobj('Tag','hDET'),'Color'),...
% 		'Units','pixels',...
% 		'FontSize',8,...
% 		'HorizontalAlignment','left',...
% 		'String','Multiple frame average. (1) no. frames to average.',...
% 	   'Position',[x4 y7 nw lh]);

end




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Button callback functions %
% ========================= %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


function aboutButton(~,~,varargin)
	
    msgbox(sprintf(...
['\nSMTrack, DetectMolecules.m \n\n' 'Copyright (C) 2011 Fredrik Persson \n\n' ...
 'This program comes with ABSOLUTELY NO WARRANTY. \n' ...
 'This is free software, and you are welcome to redistribute it \n' ...
 'under certain conditions. See license.txt for details. \n\n ']));
	
end

function CloseWindow(varargin)

close(varargin{3});

end

function IntensScaleButton(hObject,varargin)

% Load data structure
data = guidata(findobj('Tag','hDET'));

% Update button text and decide whether to continue
switch data.DETECT.toggleScaling
    case true
        set(hObject,'String','Global Scaling');
        data.DETECT.toggleScaling = false;
        guidata(findobj('Tag','hDET'), data);
        UpdateAxes;
        return
    case false
        set(hObject,'String','Frame scaling');
        data.DETECT.toggleScaling = true;
end


if str2double(get(findobj('Tag','DETECT_label_intensScale_1'),'String')) == 0

% Get File Data
selection = data.DETECT.selection;
filtData = data.DETECT.rawData;

filterNames = {...
    'log';...
    'gaussian'};
filterTypes = {...
    'DETECT_filt_log_0';...
    'DETECT_filt_gauss_0'};

% Filter the whole stack
for i = 1 : length(filterNames)
    
    if (get(findobj('Tag',filterTypes{i}),'Value'))
        
        switch filterTypes{i}
            
            case 'DETECT_filt_log_0'
                
                p(1) = str2double(get(findobj('Tag','DETECT_filt_log_1'),'String'));
                p(2) = str2double(get(findobj('Tag','DETECT_filt_log_2'),'String'));
                
                mask = -1*fspecial(filterNames{i},p(1),p(2));
                enhFact = 60/max(max(mask));
                mask = enhFact*mask;
                filtData = imfilter(filtData, mask, 'symmetric', 'conv');
                
                %Put negative values to zero
                ind = find(filtData<0);
                filtData(ind) = 0;
                
            case 'DETECT_filt_gauss_0'
                
                p(1) = str2double(get(findobj('Tag','DETECT_filt_gauss_1'),'String'));
                p(2) = str2double(get(findobj('Tag','DETECT_filt_gauss_2'),'String'));
                
                mask = fspecial(filterNames{i},p(1),p(2));
                enhFact = 60/max(max(mask));
                mask = enhFact*mask;
                filtData = imfilter(filtData, mask, 'symmetric', 'conv');
                
        end
        
    end
    
end


s = round(selection);

% Calculate global max (av of 20 brightest) and min intensity.
maxVals = max(max(filtData(s(2):s(2)+s(4)-1,s(1):s(1)+s(3)-1,:)));
sortmaxVals = sort(maxVals);
dataMax = mean(sortmaxVals(:, :, end-20:end));
data.DETECT.roiIntensMax = dataMax;
dataMin = min(min(min(filtData(s(2):s(2)+s(4)-1,s(1):s(1)+s(3)-1,:))));
data.DETECT.roiIntensMin = dataMin;

else
   dataMax = str2double(get(findobj('Tag','DETECT_label_intensScale_1'),'String')); 
   dataMin = min(min(data.DETECT.current));
   data.DETECT.roiIntensMax = dataMax;
   data.DETECT.roiIntensMin = dataMin;
end

guidata(findobj('Tag','hDET'),data);

% Adjust Images
AdjustImage();


end

function LoadTIFButton(~, varargin)

LoadNewData;

end

function SaveMATButton(~,varargin)

% Filter and prepp the whole stack
AdjustImage('all');

% Load data structure
data = guidata(findobj('Tag','hDET'));

% Get File Data
filtData = data.DETECT.filtData;
rawData = data.DETECT.rawData;
s = data.DETECT.selection;
stackSize = data.DETECT.stackSize;
oldFNr = data.DETECT.frameNumber;
filename = data.DETECT.filename;
path = data.DETECT.pathname;

%Modify name and path
filename = strcat('SMT_LOCinput_', filename);
filename(end-2:end) = 'mat';

% If needed, make a subfolder called SMT
subFold = 'SMT/';
path = strcat(path, subFold);

if exist(path, 'dir') ~= 7
    mkdir(subFold);
end

full_filename = [path filename];

% Overwrite
if exist(full_filename) == 2
    delete(full_filename);
end

finalStack = zeros(size(filtData, 1), size(filtData, 2), size(filtData, 3).*2+1);

% Get ROI selected data region
roi = filtData(s(2):s(2)+s(4)-1,s(1):s(1)+s(3)-1, :);

% Get peaks region and data intervall
if data.DETECT.toggleScaling
    dataMin = data.DETECT.roiIntensMin;
    dataMax = data.DETECT.roiIntensMax;
    dataInterval = dataMax - dataMin;
    intTh = (data.DETECT.relIntTh) * dataInterval + dataMin;
else
    disp('You have forgotten to choose global scaling, retry...');
    return
end


ind = 1
coordList = [];
% Go through all frames
tic
for outFrame = 1 : data.DETECT.stackSize
    outFrame
    
    % See if the frame contains anything above the threshold
    emptyFrame = isempty(find(roi(:, :, outFrame) > intTh, 1));
    
    if ~emptyFrame
        
        frameBW = +(filtData(:, :, outFrame)>intTh);
        frameLab = bwlabel(frameBW, 4);
        propFrame = regionprops(frameLab, filtData(:, :, outFrame), 'Area', 'Centroid', 'WeightedCentroid', 'BoundingBox', 'MeanIntensity');
        posFrame = zeros(size(filtData, 1), size(filtData, 2));
        posFrame(end,end) = outFrame;
        
        for j = 1:numel(propFrame)
            
            coord = propFrame(j).WeightedCentroid;
            posFrame(round(coord(2)), round(coord(1))) = j;
        end
        %Write the position frame
        finalStack(:, :, ind) = posFrame;
        %Write the rawData frame
        finalStack(:, :, ind+1) = rawData(:, :, outFrame);
        ind = ind+2;
        
    end
    
end
toc
[~, col] =find(finalStack(end, end, 1:2:end)==0, 1, 'first');
    
DETECT = struct('full_filename', full_filename, 'rawData', finalStack(:, :, 1:col*2-2), 'timeBetweenFrames', num2str(data.DETECT.timeBetweenFrames), 'relIntTh', num2str(data.DETECT.relIntTh),...
    'intTh', intTh, 'gaussian', zeros(1, 2), 'mexiHat', zeros(1, 2), 'globalScale', num2str(data.DETECT.toggleScaling));
toc
if (get(findobj('Tag','DETECT_filt_gauss_0'),'Value'))
    p(1) = str2double(get(findobj('Tag','DETECT_filt_gauss_1'),'String'));
    p(2) = str2double(get(findobj('Tag','DETECT_filt_gauss_2'),'String'));
else
    p = [0, 0];
end
    DETECT.gaussian = p;


if (get(findobj('Tag','DETECT_filt_log_0'),'Value'))
    p(1) = str2double(get(findobj('Tag','DETECT_filt_log_1'),'String'));
    p(2) = str2double(get(findobj('Tag','DETECT_filt_log_2'),'String'));
else
    p = [0, 0];
end
    DETECT.mexiHat = p;


% Change to the folder it the file was opened from
oldFolder = cd(path);

% Show save dialogue
[filename, pathname] = uiputfile('*.mat', 'Select .mat file to save', filename);
full_filename = [ pathname, filename ];

% Save the .mat file
save(full_filename, 'DETECT');

% Change back to the old folder
cd(oldFolder);


%Put back old parameters
data.DETECT.frameNumber = oldFNr;

guidata(findobj('Tag','hDET'), data);

end

function SaveTIFButton(~,varargin)

% FIlter and prepp the whole stack
AdjustImage('all');

% Load data structure
data = guidata(findobj('Tag','hDET'));

% Get File Data
filtData = data.DETECT.filtData;
rawData = data.DETECT.rawData;
s = data.DETECT.selection;
stackSize = data.DETECT.stackSize;
oldFNr = data.DETECT.frameNumber;

filename = strcat('SMT_DETECT_noEmpty_', data.DETECT.filename);


% If needed, make a subfolder called SMT
subFold = 'SMT/';
path = data.DETECT.pathname;
path = strcat(path, subFold);

if exist(path, 'dir') ~= 7
    mkdir(subFold);
end

full_filename = [path filename];

if exist(full_filename) == 2
    delete(full_filename);
end

% Get ROI selected data region
roi = filtData(s(2):s(2)+s(4)-1,s(1):s(1)+s(3)-1, :);

% Get peaks region and data intervall
if data.DETECT.toggleScaling
    dataMin = data.DETECT.roiIntensMin*ones(1, 1, size(filtData, 3));
    dataMax = data.DETECT.roiIntensMax*ones(1, 1, size(filtData, 3));
else
    dataMin = min(min(roi));
    dataMax = max(max(roi));
end
dataInterval = dataMax - dataMin;
intTh = (data.DETECT.relIntTh) * dataInterval + dataMin;

darkInd = 1;
coordList = [];
% Go through all frames
tic
for outFrame = 1 : data.DETECT.stackSize
    outFrame
    
    % See if the frame contains anything above the threshold
    emptyFrame = isempty(find(roi(:, :, outFrame) > intTh(:, :, outFrame)));
    
    if ~emptyFrame
        
  
            %Write the raw data frame
            imwrite(uint16(rawData(:, :, outFrame)), full_filename, 'tif', 'Compression', 'none', 'WriteMode', 'append');
            
            %Reset darkframe count
            darkInd = 1;

        
    elseif darkInd <= str2double(get(findobj('Tag','DETECT_save_blackFrames_0'),'String'))
        frame1 = min(min(rawData(:, :, outFrame)))*ones(size(rawData(:, :, outFrame)));
        frame1(10, 10) = min(min(rawData(:, :, outFrame)))+100;
        imwrite(uint16(frame1), full_filename, 'tif', 'Compression', 'none', 'WriteMode', 'append');
        darkInd = darkInd+1;
    end
    
end
toc

%Put back old parameters
data.DETECT.frameNumber = oldFNr;

guidata(findobj('Tag','hDET'), data);

end

function CloseButton(~,varargin)

close(findobj('Tag','hDET'));

end

function ShowThresholdButton(hObject,varargin)

% Load data struct
data = guidata(findobj('Tag','hDET'));

% Store all GUI data
data.DETECT.toggleValues = ~data.DETECT.toggleValues;
guidata(findobj('Tag','hDET'),data);

% Update button text
switch data.DETECT.toggleValues
    case true
        set(hObject,'String','Show All');
    case false
        set(hObject,'String','Thresholded Image');
end

% Set filter and image
AdjustImage();

end




%%%%%%%%%%%%%%%%%%%%%%
% Callback functions %
% ================== %
%%%%%%%%%%%%%%%%%%%%%%


function ROISelectionChange(pos)

% Get and rename position of selection
pos = round(pos);
x = pos(1); y = pos(2); w = pos(3); h = pos(4);

% Update position label
set(findobj('Tag','DETECT_label_roi'),'String',...
    sprintf('x = %g\t\tw = %g\ny = %g\t\th = %g',x,w,y,h));

% Load data struct
data = guidata(findobj('Tag','hDET'));

% Write data
data.DETECT.selection = pos;

% Store all GUI data
guidata(findobj('Tag','hDET'),data);

% Update images
AdjustImage();

end

function IntensityThresholdChange(pos)

% Load data struct
data = guidata(findobj('Tag','hDET'));

% Get and rename position of selection
x = pos(1); y = pos(2);
y = round(y*100)*.01;

% Update position label
if data.DETECT.toggleScaling
        dataMax = data.DETECT.roiIntensMax;
        dataMin = data.DETECT.roiIntensMin;
        dataInterval = dataMax - dataMin;
        intTh = dataMin + y*dataInterval;
        set(findobj('Tag','DETECT_label_IntensityThreshold'),'String',...
    sprintf('%g',intTh));
else
    
set(findobj('Tag','DETECT_label_IntensityThreshold'),'String',...
    sprintf('%g%%',y*100));
end

% Write data
data.DETECT.relIntTh = y;

% Store all GUI data
guidata(findobj('Tag','hDET'),data);

% Update images
AdjustImage();


end

function ScrollImage(hObject,~,varargin)

% Get scroll value and set frame number label
frame = get(hObject,'Value');
frame = round(frame);
set(hObject,'Value',frame);
set(findobj('Tag','DETECT_label_FrameNumber'),'String',sprintf('Current frame: %g',frame));

% Load data structure
data = guidata(findobj('Tag','hDET'));

% Write data
data.DETECT.frameNumber = frame;

% Update images
data.DETECT.current = data.DETECT.rawData(:, :, frame);

% Store all GUI data
guidata(findobj('Tag','hDET'),data);

% Set filter and image
AdjustImage();

end

function AdjustImage(varargin)


filterNames = {...
    'log';...
    'gaussian'};
filterTypes = {...
    'DETECT_filt_log_0';...
    'DETECT_filt_gauss_0'};

% Load data struct
data = guidata(findobj('Tag','hDET'));
selection = data.DETECT.selection;
frameN = data.DETECT.frameNumber;
current = data.DETECT.rawData(:, :, frameN);
if ~isempty(varargin) && strncmp(varargin(end), 'all', 3)
    filtData = data.DETECT.rawData;
end

% Add filters
for i = 1 : length(filterNames)
    
    if (get(findobj('Tag',filterTypes{i}),'Value'))
        
        switch filterTypes{i}
            
            case 'DETECT_filt_log_0'
                
                p(1) = str2double(get(findobj('Tag','DETECT_filt_log_1'),'String'));
                p(2) = str2double(get(findobj('Tag','DETECT_filt_log_2'),'String'));
                
                mask = -1*fspecial(filterNames{i},p(1),p(2));
%                 enhFact = 60/max(max(mask));
%                 mask = enhFact*mask;
                if ~isempty(varargin) && strncmp(varargin(end), 'all', 3)
                    filtData = imfilter(filtData, mask, 'symmetric');%, 'conv');
                    ind = find(filtData<0);
                    filtData(ind) = 0;
                else
                    current = imfilter(current, mask, 'symmetric', 'conv');
                    
                    %Put negative values to zero
                ind = find(current<0);
                current(ind) = 0;
                end
                
                
                
            case 'DETECT_filt_gauss_0'
                
                p(1) = str2double(get(findobj('Tag','DETECT_filt_gauss_1'),'String'));
                p(2) = str2double(get(findobj('Tag','DETECT_filt_gauss_2'),'String'));
                
                mask = fspecial(filterNames{i},p(1),p(2));
%                 enhFact = 60/max(max(mask));
%                 mask = enhFact*mask;
                if ~isempty(varargin) && strncmp(varargin(end), 'all', 3)
                    filtData = imfilter(filtData, mask, 'symmetric');%, 'conv');
                    data.DETECT.filtData = filtData;
                    guidata(findobj('Tag','hDET'),data);
                    return
                else
                    current = imfilter(current, mask, 'symmetric');%, 'conv');
                end
        end
        
    end
    
end


% Toggle Values
if (data.DETECT.toggleValues)
    
    % Get ROI selected data region
    s = round(selection);
    roi = current(s(2):s(2)+s(4)-1,s(1):s(1)+s(3)-1);
    
    % Get peaks region and data intervall
    if data.DETECT.toggleScaling
        dataMax = data.DETECT.roiIntensMax;
        dataMin = data.DETECT.roiIntensMin;
    else
        dataMax = max(max(roi));
        dataMin = min(min(roi));
    end
    
    dataInterval = dataMax - dataMin;
    intTh = (data.DETECT.relIntTh) * dataInterval + dataMin;
    
    % Calculate selected peaks, i.e. suppress data
    % outside intensity threshold.
    selectedPeaks = ...
        (roi < intTh) .* dataMin + ...
        (roi > intTh) .* roi;
    
    % Create new frame
    current = ones(size(current)) .* dataMin;
    current(s(2):s(2)+s(4)-1,s(1):s(1)+s(3)-1) =  selectedPeaks;
    
end

% Write data
data.DETECT.current = current;

% Store all GUI data
guidata(findobj('Tag','hDET'),data);

% Update all axes
UpdateAxes;

end

function toggleValues(~,varargin)

% Load data struct
data = guidata(findobj('Tag','hDET'));

% Store all GUI data
data.DETECT.toggleValues = ~data.DETECT.toggleValues;
guidata(findobj('Tag','hDET'),data);

% Set filter and image
AdjustImage();

end




%%%%%%%%%%%%%%%%%%%
% Other functions %
% =============== %
%%%%%%%%%%%%%%%%%%%


function SetAxes(varargin)

% Load data structure
data = guidata(findobj('Tag','hDET'));

selection = data.DETECT.selection;

% ROI Selection Axes
axis(get(findobj('Tag','DETECT_imgsc_roiSelection'),'Parent'),...
    'xy','tight');

% Horizontal Projection Axes
hHProjAxes = get(findobj('Tag','DETECT_plot_HProj'),'Parent');
set(hHProjAxes,...
    'Tag','DETECT_axes_HProj',...
    'XLim',[1 selection(4)],...
    'YLim',[1 selection(3)],...
    'Color','none',...
    'DrawMode','fast');
axis(hHProjAxes,'off');
view(hHProjAxes,[-90 0]);

% Vertical Projection Axes
hVProjAxes = get(findobj('Tag','DETECT_plot_VProj'),'Parent');
set(hVProjAxes,...
    'Tag','DETECT_axes_VProj',...
    'XLim',[1 selection(4)],...
    'YLim',[1 selection(3)],...
    'Color','none',...
    'DrawMode','fast');
axis(hVProjAxes,'off');
view(hVProjAxes,[0 0]);

end

function UpdateSelectionTools(varargin)

% Load data structure
data = guidata(findobj('Tag','hDET'));

roiSelTool = data.DETECT.roiSelTool;
stackSize = data.DETECT.stackSize;

% Calc new varables
so = size(data.DETECT.current);
newROI = round([1 1 .2*so(2) .2*so(1)]);

% Update constrain functions
fcn = makeConstrainToRectFcn('imrect',[1 so(2)],[1 so(1)]);
setPositionConstraintFcn(roiSelTool,fcn);

% Update positions
setPosition(roiSelTool,newROI);

% Frame number scrollbar
set(findobj('Tag','DETECT_scrollbar_frameNumber'),...
    'Max',stackSize,...
    'Min',1,...
    'SliderStep',[1 10] / (stackSize-1),...
    'Value',1)

end

function UpdateAxes(varargin)

% Load data structure
data = guidata(findobj('Tag','hDET'));

% Get Data
frame = data.DETECT.frameNumber;
selection = data.DETECT.selection;
current = data.DETECT.current;
relIntTh = data.DETECT.relIntTh;
hSelThH = data.DETECT.hSelThH;
hSelThV = data.DETECT.hSelThV;

% Get ROI data
s = round(selection);
roi = current(s(2):s(2)+s(4)-1,s(1):s(1)+s(3)-1);

peaksRegion = .70;%str2double(get(findobj('Tag','peaksRegion'),'String'))/100;

% Calculate peaks region data
if data.DETECT.toggleScaling
    dataMin = data.DETECT.roiIntensMin;
    dataMax = data.DETECT.roiIntensMax;
else
    dataMin = min(min(roi));
    dataMax = max(max(roi))+1;
end

dataInterval = dataMax - dataMin;
region = (peaksRegion) * dataInterval + dataMin;

% Main axes
set(findobj('Tag','DETECT_imgsc_roiSelection'),...
    'CData', current,...
    'Visible','on');
set(get(findobj('Tag','DETECT_imgsc_roiSelection'),'Parent'),...
    'Clim',[dataMin dataMax]);

% Horizontal Projection Axes
hHProjAxes = findobj('Tag','DETECT_axes_HProj');
hHProjPlot = findobj('Tag','DETECT_plot_HProj');
set(hHProjPlot,'ZData',roi);
set(hHProjAxes,...
    'XLim',[1 selection(3)],...
    'YLim',[1 selection(4)],...
    'ZLim',[dataMin dataMax]);
set(findobj('Tag','DETECT_selTool_Hth'),...
    'YData',[relIntTh relIntTh]);
setPosition(hSelThH,[100 relIntTh]);


% Vertical Projection Axes
hVProjAxes = findobj('Tag','DETECT_axes_VProj');
hVProjPlot = findobj('Tag','DETECT_plot_VProj');
set(hVProjPlot,'ZData',roi);
set(hVProjAxes,...
    'XLim',[1 selection(3)],...
    'YLim',[1 selection(4)],...
    'ZLim',[dataMin dataMax]);
set(findobj('Tag','DETECT_selTool_Vth'),...
    'YData',[relIntTh relIntTh]);
setPosition(hSelThV,[100 relIntTh]);

drawnow;

end

function ResetLabels(varargin)

% Load Data
data = guidata(findobj('Tag','hDET'));

filename = data.DETECT.filename;
original = data.DETECT.original;
stackSize = data.DETECT.stackSize;
selection = data.DETECT.selection;

% Data Info Panel
set(findobj('Tag','DETECT_label_filename'),'String',filename);
set(findobj('Tag','DETECT_label_stackSize'),'String',sprintf('%g',stackSize));
set(findobj('Tag','DETECT_label_frameSize'),'String',sprintf('[%g,%g]',size(original)));
set(findobj('Tag','DETECT_label_roi'),'String',sprintf('x = %g\t\ty = %g\nw = %g\t\th = %g',selection));
%Button
set(findobj('Tag','DETECT_label_intensScale_0'),'String', 'Global Scaling');

end

function LoadNewData(varargin)

% Load data struct
data = guidata(findobj('Tag','hDET'));
if isfield(data.DETECT, 'pathname') 
cd(data.DETECT.pathname);
end

% Get filename and path with "uigetfile"
[filename, pathname] = uigetfile({'*.stk'; '*.tif'}, 'Select image file (STK or TIF)');
if ( filename == 0 )
    disp('Error! No (or wrong) file selected!')
    filename = 0;
    pathname = 0;
    return
end
full_filename = [ pathname, filename ];

if ~isempty(strfind(filename, '.tif'))
    
    % Calc. new variables
    imInfo = imfinfo(full_filename);
    imWidth = imInfo(1).Width;
    imHeight = imInfo(1).Height;
    stackSize = numel(imInfo);
    
    rawData = zeros(imHeight, imWidth, stackSize);
    
    t = Tiff(full_filename, 'r');
    for inFrame = 1:stackSize
        inFrame
        rawData(:, :, inFrame) = t.read();
        if inFrame<stackSize
            t.nextDirectory();
        end
    end
    t.close();
    data.DETECT.timeBetweenFrames = 0;
    
else
    [rawData, timeBetweenFrames] = readSTK(full_filename);
    stackSize = size(rawData, 3);
    data.DETECT.timeBetweenFrames = timeBetweenFrames;
end

if stackSize==1
    rawData(:, :, 2) = zeros(size(rawData(:, :, 1)));
    stackSize = 2;
end

filtData = rawData;
frameNumber = 1;
original = rawData(:, :, frameNumber);
current = original;

toggleScaling = false;
roiIntensMax = 1;
roiIntensMin = 0;

% Store all GUI data
data.DETECT.filename = filename;
data.DETECT.pathname = pathname;
data.DETECT.stackSize = stackSize;
data.DETECT.rawData = rawData;
data.DETECT.filtData = filtData;
data.DETECT.frameNumber = frameNumber;
data.DETECT.original = original;
data.DETECT.current = current;
data.DETECT.toggleScaling = toggleScaling;
data.DETECT.roiIntensMax = roiIntensMax;
data.DETECT.roiIntensMin = roiIntensMin;

guidata(findobj('Tag','hDET'),data);

% Set Axes to new data and update twice to let it go through
for i = 1:2
    UpdateSelectionTools;
    UpdateAxes;
    SetAxes;
    AdjustImage();
    ResetLabels;
end

end





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Discarded functions    %
% ========================= %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
